[
{
	"uri": "https://untoldwind.github.io/KontrolSystem/interna/",
	"title": "Interna",
	"tags": [],
	"description": "",
	"content": "Chapter X Interna Lorem Ipsum.\n"
},
{
	"uri": "https://untoldwind.github.io/KontrolSystem/reference/",
	"title": "Reference",
	"tags": [],
	"description": "",
	"content": "Chapter X Some Chapter title Lorem Ipsum.\n"
},
{
	"uri": "https://untoldwind.github.io/KontrolSystem/contribute/",
	"title": "Contribute",
	"tags": [],
	"description": "",
	"content": "Chapter X Contribute Lorem Ipsum.\n"
},
{
	"uri": "https://untoldwind.github.io/KontrolSystem/",
	"title": "KontrolSystem",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://untoldwind.github.io/KontrolSystem/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://untoldwind.github.io/KontrolSystem/reference/core_background/",
	"title": "core::background",
	"tags": [],
	"description": "",
	"content": "Provides means to run functions as asynchronous background task.\nTypes Task Represents a background task\nFields    Name Type Description     is_canceled bool Check if the task has been canceled   is_completed bool Check if the task is completed   is_success bool Check if the task is completed and has a value   result T Get the result of the task once completed    Methods cancel task.cancel ( ) -\u0026gt; Unit Cancel/abort the task\nFunctions is_background pub sync fn is_background ( ) -\u0026gt; bool Check if current thread is a background thread\nrun pub sync fn run ( function : fn() -\u0026gt; T ) -\u0026gt; core::background::Task\u0026lt;T\u0026gt; Run a function as background task.\n"
},
{
	"uri": "https://untoldwind.github.io/KontrolSystem/reference/core_logging/",
	"title": "core::logging",
	"tags": [],
	"description": "",
	"content": "Provides basic logging. In KSP all log messages will appear in the debug console as well as the KSP.log file.\nFunctions debug pub sync fn debug ( message : string ) -\u0026gt; Unit Write a debug-level message.\nerror pub sync fn error ( message : string ) -\u0026gt; Unit Write an error-level message.\ninfo pub sync fn info ( message : string ) -\u0026gt; Unit Write an info-level message.\nwarning pub sync fn warning ( message : string ) -\u0026gt; Unit Write a warning-level message.\n"
},
{
	"uri": "https://untoldwind.github.io/KontrolSystem/reference/core_math/",
	"title": "core::math",
	"tags": [],
	"description": "",
	"content": "Collection of basic mathematical functions.\nTypes Random Random number generator\nMethods next_float random.next_float ( ) -\u0026gt; float Get next random number between 0.0 and 1.0\nnext_gaussian random.next_gaussian ( mu : float, sigma : float ) -\u0026gt; float Get next gaussian distributed random number\nnext_int random.next_int ( min : int, max : int ) -\u0026gt; int Get next random number between min and max\nConstants    Name Type Description     DEG_TO_RAD float Multiplicator to convert an angle of degree to radian.   E float Represents the natural logarithmic base, specified by the e constant,   EPSILON float Machine epsilon, i.e lowest possible resolution of a floating point number.   MAX_FLOAT float Maximum possible floating point number.   MAX_INT int Maximum possible integer number.   MIN_FLOAT float Minimum possible floating point number.   MIN_INT int Minimum possible integer number.   PI float Represents the ratio of the circumference of a circle to its diameter, specified by the constant, π.   RAD_TO_DEG float Multiplicator to convert an angle of radian to degree.    Functions abs pub sync fn abs ( value : float ) -\u0026gt; float Returns the absolute value of a number.\nacos pub sync fn acos ( d : float ) -\u0026gt; float Returns the angle in radian whose cosine is the specified number.\nacos_deg pub sync fn acos_deg ( x : float ) -\u0026gt; float Returns the angle in degree whose cosine is the specified number.\nacosh pub sync fn acosh ( x : float ) -\u0026gt; float Returns the angle whose hyperbolic cosine is the specified number.\nasin pub sync fn asin ( d : float ) -\u0026gt; float Returns the angle in radian whose sine is the specified number.\nasin_deg pub sync fn asin_deg ( x : float ) -\u0026gt; float Returns the angle in degree whose sine is the specified number.\nasinh pub sync fn asinh ( x : float ) -\u0026gt; float Returns the angle whose hyperbolic sine is the specified number.\natan pub sync fn atan ( d : float ) -\u0026gt; float Returns the angle in radian whose tanget is the specified number.\natan_deg pub sync fn atan_deg ( x : float ) -\u0026gt; float Returns the angle in degree whose tangent is the specified number.\natan2 pub sync fn atan2 ( y : float, x : float ) -\u0026gt; float Returns the angle in redian whose tangent is the quotient of two specified numbers.\natan2_deg pub sync fn atan2_deg ( y : float, x : float ) -\u0026gt; float Returns the angle in degree whose tangent is the quotient of two specified numbers.\natanh pub sync fn atanh ( x : float ) -\u0026gt; float Returns the angle whose hyperbolic tanget is the specified number.\nceiling pub sync fn ceiling ( a : float ) -\u0026gt; float Returns the smallest integral value that is greater than or equal to the specified number.\nclamp pub sync fn clamp ( x : float, min : float, max : float ) -\u0026gt; float Clamp a number between a given minimum and maximum\nclamp_degrees180 pub sync fn clamp_degrees180 ( angle : float ) -\u0026gt; float Clamp an angle between -180 and 180 degree\nclamp_degrees360 pub sync fn clamp_degrees360 ( angle : float ) -\u0026gt; float Clamp an angle between 0 and 360 degree\nclamp_radians_pi pub sync fn clamp_radians_pi ( angle : float ) -\u0026gt; float Clamp an angle between -π and π\nclamp_radians2_pi pub sync fn clamp_radians2_pi ( angle : float ) -\u0026gt; float Clamp an angle between 0 and 2π\ncos pub sync fn cos ( d : float ) -\u0026gt; float Returns the cosine of the specified angle in redian.\ncos_deg pub sync fn cos_deg ( x : float ) -\u0026gt; float Returns the cosine of the specified angle in degree.\ncosh pub sync fn cosh ( value : float ) -\u0026gt; float Returns the hyperbolic cosine of the specified angle.\nexp pub sync fn exp ( d : float ) -\u0026gt; float Returns e raised to the specified power.\nfloor pub sync fn floor ( d : float ) -\u0026gt; float Returns the largest integral value less than or equal to the specified number.\nlog pub sync fn log ( d : float ) -\u0026gt; float Returns the natural (base e) logarithm of a specified number.\nlog10 pub sync fn log10 ( d : float ) -\u0026gt; float Returns the base 10 logarithm of a specified number.\nmax pub sync fn max ( val1 : float, val2 : float ) -\u0026gt; float Returns the larger of two decimal numbers.\nmin pub sync fn min ( val1 : float, val2 : float ) -\u0026gt; float Returns the smaller of two decimal numbers.\npow pub sync fn pow ( x : float, y : float ) -\u0026gt; float Returns a specified number raised to the specified power.\nrandom pub sync fn random ( ) -\u0026gt; core::math::Random New random number generator\nrandom_from_seed pub sync fn random_from_seed ( seed : int ) -\u0026gt; core::math::Random New random number generator from given seed\nround pub sync fn round ( a : float ) -\u0026gt; float Rounds a decimal value to the nearest integral value, and rounds midpoint values to the nearest even number.\nsin pub sync fn sin ( a : float ) -\u0026gt; float Returns the sine of the specified angle in redian.\nsin_deg pub sync fn sin_deg ( x : float ) -\u0026gt; float Returns the sine of the specified angle in degree.\nsinh pub sync fn sinh ( value : float ) -\u0026gt; float Returns the hyperbolic sine of the specified angle.\nsqrt pub sync fn sqrt ( d : float ) -\u0026gt; float Returns the square root of a specified number.\ntan pub sync fn tan ( a : float ) -\u0026gt; float Returns the sine of the specified angle in redian.\ntan_deg pub sync fn tan_deg ( x : float ) -\u0026gt; float Returns the sine of the specified angle in degree.\ntanh pub sync fn tanh ( value : float ) -\u0026gt; float Returns the hyperbolic tangent of the specified angle.\ntruncate pub sync fn truncate ( d : float ) -\u0026gt; float Calculates the integral part of a specified number.\n"
},
{
	"uri": "https://untoldwind.github.io/KontrolSystem/reference/core_testing/",
	"title": "core::testing",
	"tags": [],
	"description": "",
	"content": "Provides basic assertions for testing. All functions provided by this module should be only used by test function.\nFunctions assert_false pub sync fn assert_false ( actual : bool ) -\u0026gt; Unit Assert that actual is false (Test only)\nassert_float pub sync fn assert_float ( expected : float, actual : float, delta : float ) -\u0026gt; Unit Assert that actual float is almost equal to expected with an absolute tolerance of delta (Test only)\nassert_int pub sync fn assert_int ( expected : int, actual : int ) -\u0026gt; Unit Assert that actual integer is equal to expected (Test only)\nassert_none pub sync fn assert_none ( actual : Option\u0026lt;T\u0026gt; ) -\u0026gt; Unit assert_some pub sync fn assert_some ( expected : T, actual : Option\u0026lt;T\u0026gt; ) -\u0026gt; Unit assert_string pub sync fn assert_string ( expected : string, actual : string ) -\u0026gt; Unit Assert that actual string is equal to expected (Test only)\nassert_true pub sync fn assert_true ( actual : bool ) -\u0026gt; Unit Assert that actual is true (Test only)\nassert_yield pub sync fn assert_yield ( expected : int ) -\u0026gt; Unit Assert that test case has yielded expected number of times already (Async test only)\nfail_test pub sync fn fail_test ( message : string ) -\u0026gt; Unit Fail the test case with a message (Test only).\ntest_sleep pub sync fn test_sleep ( millis : int ) -\u0026gt; Unit Suspend execution for millis\nyield pub fn yield ( ) -\u0026gt; Unit Yield the test case (Async test only)\n"
},
{
	"uri": "https://untoldwind.github.io/KontrolSystem/reference/ksp_console/",
	"title": "ksp::console",
	"tags": [],
	"description": "",
	"content": "Provides functions to interact with the in-game KontrolSystem Console. As of now the console is output- and monochrome-only, this might change in the future.\nAdditionally there is support for displaying popup messages on the HUD.\nTypes Console Representation of a console\nFields    Name Type Description     cursor_col int    cursor_row int     Methods clear console.clear ( ) -\u0026gt; Unit Clear the console of all its content and move cursor to (0, 0).\nclear_line console.clear_line ( row : int ) -\u0026gt; Unit Clear a line\nmove_cursor console.move_cursor ( row : int, column : int ) -\u0026gt; Unit Move the cursor to a give row and column.\nprint console.print ( message : string ) -\u0026gt; Unit Print a message at the current cursor position (and move cursor forward)\nprint_at console.print_at ( row : int, column : int, message : string ) -\u0026gt; Unit Moves the cursor to the specified position, prints the message and restores the previous cursor position\nprint_line console.print_line ( message : string ) -\u0026gt; Unit Print a message at the current cursor position and move cursor to the beginning of the next line.\nRgbaColor Interface color with alpha channel.\nFields    Name Type Description     alpha float    blue float    green float    red float     Constants    Name Type Description     BLUE ksp::console::RgbaColor Color blue   CONSOLE ksp::console::Console Main console   CYAN ksp::console::RgbaColor Color cyan   GREEN ksp::console::RgbaColor Color green   RED ksp::console::RgbaColor Color red   YELLOW ksp::console::RgbaColor Color yellow    Functions color pub sync fn color ( red : float, green : float, blue : float, alpha : float ) -\u0026gt; ksp::console::RgbaColor Create a new color from red, green, blue and alpha (0.0 - 1.0).\nhud_text pub sync fn hud_text ( message : string, seconds : int, size : int, styleSelect : int, color : ksp::console::RgbaColor ) -\u0026gt; Unit Show a message on the HUD to inform the player that something extremely cool (or extremely uncool) has happed.\n"
},
{
	"uri": "https://untoldwind.github.io/KontrolSystem/reference/ksp_control/",
	"title": "ksp::control",
	"tags": [],
	"description": "",
	"content": "Types MovingAverage Fields    Name Type Description     mean float    mean_diff float    sample_limit int    value_count int     Methods reset movingaverage.reset ( ) -\u0026gt; Unit update movingaverage.update ( sampleTime : float, value : float ) -\u0026gt; float PIDLoop Fields    Name Type Description     change_rate float    d_term float    error float    error_sum float    extra_unwind bool    i_term float    input float    kd float    ki float    kp float    last_sample_time float    max_output float    min_output float    output float    p_term float    setpoint float     Methods reset_i pidloop.reset_i ( ) -\u0026gt; Unit update pidloop.update ( sampleTime : float, input : float ) -\u0026gt; float RCSTranslateManager Fields    Name Type Description     translate ksp::math::Vec3     Methods release rcstranslatemanager.release ( ) -\u0026gt; Unit set_translate_provider rcstranslatemanager.set_translate_provider ( newTranslateProvider : fn() -\u0026gt; ksp::math::Vec3 ) -\u0026gt; Unit SteeringManager Fields    Name Type Description     direction ksp::math::Direction    max_stopping_time float    pitch_torque_adjust float    pitch_torque_factor float    pitch_ts float    roll_control_angle_range float    roll_torque_adjust float    roll_torque_factor float    roll_ts float    show_angular_vectors bool    show_facing_vectors bool    show_steering_stats bool    yaw_torque_adjust float    yaw_torque_factor float    yaw_ts float     Methods release steeringmanager.release ( ) -\u0026gt; Unit reset_to_default steeringmanager.reset_to_default ( ) -\u0026gt; Unit set_direction_provider steeringmanager.set_direction_provider ( newDirectionProvider : fn() -\u0026gt; ksp::math::Direction ) -\u0026gt; Unit ThrottleManager Fields    Name Type Description     throttle float     Methods release throttlemanager.release ( ) -\u0026gt; Unit set_throttle_provider throttlemanager.set_throttle_provider ( newThrottleProvider : fn() -\u0026gt; float ) -\u0026gt; Unit TorquePI Fields    Name Type Description     i float    loop ksp::control::PIDLoop    tr float    ts float     Methods reset_i torquepi.reset_i ( ) -\u0026gt; Unit update torquepi.update ( sampleTime : float, input : float, setpoint : float, momentOfInertia : float, maxOutput : float ) -\u0026gt; float WheelSteeringManager Fields    Name Type Description     bearing float     Methods release wheelsteeringmanager.release ( ) -\u0026gt; Unit set_bearing_provider wheelsteeringmanager.set_bearing_provider ( newBearingProvider : fn() -\u0026gt; float ) -\u0026gt; Unit WheelThrottleManager Fields    Name Type Description     throttle float     Methods release wheelthrottlemanager.release ( ) -\u0026gt; Unit set_throttle_provider wheelthrottlemanager.set_throttle_provider ( newThrottleProvider : fn() -\u0026gt; float ) -\u0026gt; Unit Functions moving_average pub sync fn moving_average ( sampleLimit : int ) -\u0026gt; ksp::control::MovingAverage Create a new MovingAverage with given sample limit.\npid_loop pub sync fn pid_loop ( kp : float, ki : float, kd : float, minOutput : float, maxOutput : float ) -\u0026gt; ksp::control::PIDLoop Create a new PIDLoop with given parameters.\n"
},
{
	"uri": "https://untoldwind.github.io/KontrolSystem/reference/ksp_debug/",
	"title": "ksp::debug",
	"tags": [],
	"description": "",
	"content": "Provides utility functions to draw in-game markers that can be helpful to visualize why an algorithm went haywire.\nTypes Debug Collection of debug helper\nMethods add_ground_marker debug.add_ground_marker ( geoCoordinates : ksp::orbit::GeoCoordinates, color : ksp::console::RgbaColor, rotation : float ) -\u0026gt; ksp::debug::GroundMarker add_line debug.add_line ( startProvider : fn() -\u0026gt; ksp::math::Vec3, endProvider : fn() -\u0026gt; ksp::math::Vec3, color : ksp::console::RgbaColor, label : string, width : float ) -\u0026gt; ksp::debug::DebugVector Draws a line from start to end with a specified color and width in the current game scene. The line may have a label at its mid-point.\nadd_pixel_path debug.add_pixel_path ( path : ksp::math::Vec3[], color : ksp::console::RgbaColor, dashed : bool ) -\u0026gt; ksp::debug::PixelPath add_vector debug.add_vector ( startProvider : fn() -\u0026gt; ksp::math::Vec3, endProvider : fn() -\u0026gt; ksp::math::Vec3, color : ksp::console::RgbaColor, label : string, width : float ) -\u0026gt; ksp::debug::DebugVector Draws a vector positioned at start with a specified color and width in the current game scene. The vector may have a label at its mid-point.\nclear_markers debug.clear_markers ( ) -\u0026gt; Unit Remove all markers from the game-scene.\nDebugVector Represents a debugging vector in the current scene.\nFields    Name Type Description     color ksp::console::RgbaColor The color of the debugging vector   end ksp::math::Vec3 The current end position of the debugging vector.   pointy bool Controls if an arrow should be drawn at the end.   scale float    start ksp::math::Vec3 The current starting position of the debugging vector.   visible bool Controls if the debug-vector is currently visible (initially true)   width float The width of the debugging vector    GroundMarker Represents a ground marker on a given celestial body.\nFields    Name Type Description     color ksp::console::RgbaColor The color of the ground marker vector   geo_coordinates ksp::orbit::GeoCoordinates    rotation float    visible bool Controls if the ground marker is currently visible (initially true)    PixelPath Represents a pixel path.\nFields    Name Type Description     color ksp::console::RgbaColor The color of the ground marker vector   dashed bool    path ksp::math::Vec3[]    visible bool Controls if the ground marker is currently visible (initially true)    Constants    Name Type Description     DEBUG ksp::debug::Debug Collection of debug helper    "
},
{
	"uri": "https://untoldwind.github.io/KontrolSystem/reference/ksp_game/",
	"title": "ksp::game",
	"tags": [],
	"description": "",
	"content": "Collection to game and runtime related functions.\nFunctions current_scene pub sync fn current_scene ( ) -\u0026gt; string Get the current game scene.\nResults may be:\n SPACECENTER: Game is currently showing the outside of the space center. EDITOR: Game is currently showing the VAB or SPH. FLIGHT: Game is currently in flight of a vessel. TRACKINGSTATION: Game is currently showing the tracking station.  current_time pub sync fn current_time ( ) -\u0026gt; float Get the current universal time (UT) in seconds from start.\nsleep pub fn sleep ( seconds : float ) -\u0026gt; Unit Stop execution of given number of seconds (factions of a seconds are supported as well).\nwait_until pub fn wait_until ( predicate : fn() -\u0026gt; bool ) -\u0026gt; Unit Stop execution until a given condition is met.\nwait_while pub fn wait_while ( predicate : fn() -\u0026gt; bool ) -\u0026gt; Unit Stop execution as long as a given condition is met.\nyield pub fn yield ( ) -\u0026gt; Unit Yield execution to allow Unity to do some other stuff inbetween.\n"
},
{
	"uri": "https://untoldwind.github.io/KontrolSystem/reference/ksp_game_warp/",
	"title": "ksp::game::warp",
	"tags": [],
	"description": "",
	"content": "Collection of functions to control time warp.\nConstants    Name Type Description     PHYSICS string Value of current_warp_mode if in physics warp.   RAILS string Value of current_warp_mode if warp is on rails.    Functions cancel pub sync fn cancel ( ) -\u0026gt; Unit Cancel time warp\ncurrent_index pub sync fn current_index ( ) -\u0026gt; int Get the current warp index. Actual factor depends on warp mode.\ncurrent_mode pub sync fn current_mode ( ) -\u0026gt; string Get the current warp mode (RAILS/PHYSICS).\ncurrent_rate pub sync fn current_rate ( ) -\u0026gt; float Get the current warp rate (i.e. actual time multiplier).\nis_settled pub sync fn is_settled ( ) -\u0026gt; bool Check if time warp has settled down\nset_index pub sync fn set_index ( warpIndex : int ) -\u0026gt; Unit Set warp index. Actual factor depends on warp mode.\nset_mode pub sync fn set_mode ( warpMode : string ) -\u0026gt; Unit Set the warp mode (RAILS/PHYSICS).\nwarp_to pub sync fn warp_to ( ut : float ) -\u0026gt; Unit Warp forward to a specific universal time.\n"
},
{
	"uri": "https://untoldwind.github.io/KontrolSystem/reference/ksp_math/",
	"title": "ksp::math",
	"tags": [],
	"description": "",
	"content": "Collection of KSP/Unity related mathematical functions.\nTypes Direction Represents the rotation from an initial coordinate system when looking down the z-axis and \u0026ldquo;up\u0026rdquo; being the y-axis\nFields    Name Type Description     euler ksp::math::Vec3 Euler angles in degree of the rotation   pitch float Pitch in degree   right_vector ksp::math::Vec3 Right vector of the rotation   roll float Roll in degree   up_vector ksp::math::Vec3 Up vector of the rotation   vector ksp::math::Vec3 Fore vector of the rotation (i.e. looking/facing direction   yaw float Yaw in degree    Methods to_string direction.to_string ( ) -\u0026gt; string Convert the direction to string\nVec2 A 2-dimensional vector.\nFields    Name Type Description     magnitude float Magnitude/length of the vector   normalized ksp::math::Vec2 Normalized vector (i.e. scaled to length 1)   sqr_magnitude float Squared magnitude of the vector   x float x-coordinate   y float y-coordinate    Methods angle_to vec2.angle_to ( other : ksp::math::Vec2 ) -\u0026gt; float Calculate the angle in degree to other vector.\nto_string vec2.to_string ( ) -\u0026gt; string Convert the vector to string\nVec3 A 3-dimensional vector.\nFields    Name Type Description     magnitude float Magnitude/length of the vector   normalized ksp::math::Vec3 Normalized vector (i.e. scaled to length 1)   sqr_magnitude float Squared magnitude of the vector   x float x-coordinate   xzy ksp::math::Vec3 Swapped y- and z-coordinate   y float y-coordinate   z float z-coordinate    Methods angle_to vec3.angle_to ( other : ksp::math::Vec3 ) -\u0026gt; float Calculate the angle in degree to other vector.\ncross vec3.cross ( other : ksp::math::Vec3 ) -\u0026gt; ksp::math::Vec3 Calculate the cross/other product with other vector.\ndistance_to vec3.distance_to ( other : ksp::math::Vec3 ) -\u0026gt; ksp::math::Vec3 Calculate the distance between this and other vector.\ndot vec3.dot ( other : ksp::math::Vec3 ) -\u0026gt; float Calculate the dot/inner product with other vector.\nexclude_from vec3.exclude_from ( other : ksp::math::Vec3 ) -\u0026gt; ksp::math::Vec3 Exclude this from other vector.\nlerp_to vec3.lerp_to ( other : ksp::math::Vec3, t : float ) -\u0026gt; ksp::math::Vec3 Linear interpolate position between this and other vector, where t = 0.0 is this and t = 1.0 is other.\nproject_to vec3.project_to ( other : ksp::math::Vec3 ) -\u0026gt; ksp::math::Vec3 Project this on other vector.\nto_string vec3.to_string ( ) -\u0026gt; string Convert vector to string.\nFunctions angle_axis pub sync fn angle_axis ( angle : float, axis : ksp::math::Vec3 ) -\u0026gt; ksp::math::Direction Create a Direction from a given axis with rotation angle in degree\nangle_delta pub sync fn angle_delta ( a : float, b : float ) -\u0026gt; float Calculate the difference between to angles in degree (-180 .. 180)\neuler pub sync fn euler ( x : float, y : float, z : float ) -\u0026gt; ksp::math::Direction Create a Direction from euler angles in degree\nlook_dir_up pub sync fn look_dir_up ( lookDirection : ksp::math::Vec3, upDirection : ksp::math::Vec3 ) -\u0026gt; ksp::math::Direction Create a Direction from a fore-vector and an up-vector\nvec2 pub sync fn vec2 ( x : float, y : float ) -\u0026gt; ksp::math::Vec2 Create a new 2-dimensional vector\nvec3 pub sync fn vec3 ( x : float, y : float, z : float ) -\u0026gt; ksp::math::Vec3 Create a new 3-dimensional vector\n"
},
{
	"uri": "https://untoldwind.github.io/KontrolSystem/reference/ksp_orbit/",
	"title": "ksp::orbit",
	"tags": [],
	"description": "",
	"content": "Types Body Represents an in-game celestial body.\nFields    Name Type Description     angular_velocity ksp::math::Vec3 Angular velocity vector of the body   atmosphere_depth float Depth/height of the atmosphere if present.   grav_parameter float Standard gravitation parameter of the body.   has_atmosphere bool true if the celestial body has an atmosphere to deal with.   name string Name of the celestial body.   orbit ksp::orbit::Orbit The orbit of the celestial body itself (around the parent body)   position ksp::math::Vec3 The current position of the body   radius float Radius of the body at sea level   real_max_atmosphere_altitude float    rotation_period float Rotation period of the planet.   SOI_radius float Radius of the sphere of influence of the body   up ksp::math::Vec3     Methods altitude_of body.altitude_of ( position : ksp::math::Vec3 ) -\u0026gt; float create_orbit body.create_orbit ( position : ksp::math::Vec3, velocity : ksp::math::Vec3, ut : float ) -\u0026gt; ksp::orbit::Orbit Create a new orbit around this body starting at a given relative position and velocity at universal time ut\ngeo_coordinates body.geo_coordinates ( latitude : float, longitude : float ) -\u0026gt; ksp::orbit::GeoCoordinates latitude body.latitude ( position : ksp::math::Vec3 ) -\u0026gt; float longitude body.longitude ( position : ksp::math::Vec3 ) -\u0026gt; float relative_velocity body.relative_velocity ( position : ksp::math::Vec3 ) -\u0026gt; ksp::math::Vec3 surface_normal body.surface_normal ( latitude : float, longitude : float ) -\u0026gt; ksp::math::Vec3 Get the surface normal at a latitude and longitude (i.e. the vector pointing up at this geo coordinate\nsurface_position body.surface_position ( latitude : float, longitude : float, altitude : float ) -\u0026gt; ksp::math::Vec3 terrain_height body.terrain_height ( lat : float, lon : float ) -\u0026gt; float GeoCoordinates Fields    Name Type Description     body ksp::orbit::Body    latitude float    longitude float    surface_normal ksp::math::Vec3    terrain_height float     Methods altitude_position geocoordinates.altitude_position ( altitude : float ) -\u0026gt; ksp::math::Vec3 altitude_velocity geocoordinates.altitude_velocity ( altitude : float ) -\u0026gt; ksp::math::Vec3 Orbit Represents an in-game orbit.\nFields    Name Type Description     apoapsis float Apoapsis of the orbit above sealevel of the reference_body.   apoapsis_radius float Radius of apoapsis of the orbit (i.e. from the center of the `reference_body')   argument_of_periapsis float Argument of periapsis of the orbit.   eccentricity float Eccentricity of the orbit.   epoch float Orbit epoch.   inclination float Inclination of the orbit in degree.   LAN float Longitude of ascending node of the orbit in degree   mean_anomaly_at_epoch float Mean anomaly of the orbit at epoch   mean_motion float Mean motion of the orbit.   orbit_normal ksp::math::Vec3 Normal vector perpendicular to orbital plane.   patch_end_time float Universal time of the end of this orbital patch (if there a planed maneuvering nodes   periapsis float Periapsis of the orbit above sealevel of the reference_body   periapsis_radius float Radius of periapsis of the orbit (i.e. from the center of the `reference_body')   period float Orbital period.   reference_body ksp::orbit::Body The celestial body the orbit is referenced on.   semi_major_axis float Semi major axis of the orbit.    Methods absolute_position orbit.absolute_position ( ut : float ) -\u0026gt; ksp::math::Vec3 Get the absolute position at a given universal time ut\nascending_node_true_anomaly orbit.ascending_node_true_anomaly ( b : ksp::orbit::Orbit ) -\u0026gt; float descending_node_true_anomaly orbit.descending_node_true_anomaly ( b : ksp::orbit::Orbit ) -\u0026gt; float get_eccentric_anomaly_at_true_anomaly orbit.get_eccentric_anomaly_at_true_anomaly ( trueAnomaly : float ) -\u0026gt; float get_mean_anomaly_at_eccentric_anomaly orbit.get_mean_anomaly_at_eccentric_anomaly ( ecc : float ) -\u0026gt; float horizontal orbit.horizontal ( ut : float ) -\u0026gt; ksp::math::Vec3 mean_anomaly_at_ut orbit.mean_anomaly_at_ut ( ut : float ) -\u0026gt; float next_apoapsis_time orbit.next_apoapsis_time ( ut : Option\u0026lt;float\u0026gt; ) -\u0026gt; float next_periapsis_time orbit.next_periapsis_time ( ut : Option\u0026lt;float\u0026gt; ) -\u0026gt; float next_time_of_radius orbit.next_time_of_radius ( ut : float, radius : float ) -\u0026gt; float normal_plus orbit.normal_plus ( ut : float ) -\u0026gt; ksp::math::Vec3 orbital_velocity orbit.orbital_velocity ( ut : float ) -\u0026gt; ksp::math::Vec3 perturbed_orbit orbit.perturbed_orbit ( ut : float, dV : ksp::math::Vec3 ) -\u0026gt; ksp::orbit::Orbit prograde orbit.prograde ( ut : float ) -\u0026gt; ksp::math::Vec3 radial_plus orbit.radial_plus ( ut : float ) -\u0026gt; ksp::math::Vec3 radius orbit.radius ( ut : float ) -\u0026gt; float relative_position orbit.relative_position ( ut : float ) -\u0026gt; ksp::math::Vec3 synodic_period orbit.synodic_period ( other : ksp::orbit::Orbit ) -\u0026gt; float time_of_ascending_node orbit.time_of_ascending_node ( b : ksp::orbit::Orbit, ut : float ) -\u0026gt; float time_of_descending_node orbit.time_of_descending_node ( b : ksp::orbit::Orbit, ut : float ) -\u0026gt; float time_of_true_anomaly orbit.time_of_true_anomaly ( trueAnomaly : float, ut : float ) -\u0026gt; float true_anomaly_at_radius orbit.true_anomaly_at_radius ( radius : float ) -\u0026gt; float true_anomaly_from_vector orbit.true_anomaly_from_vector ( vec : ksp::math::Vec3 ) -\u0026gt; float u_t_at_mean_anomaly orbit.u_t_at_mean_anomaly ( meanAnomaly : float, ut : float ) -\u0026gt; float up orbit.up ( ut : float ) -\u0026gt; ksp::math::Vec3 Waypoint Fields    Name Type Description     altitude float    body ksp::orbit::Body    coordinates ksp::orbit::GeoCoordinates    is_clustered bool    is_grounded bool    is_on_surface bool    name string    position ksp::math::Vec3     Functions all_waypoints pub sync fn all_waypoints ( ) -\u0026gt; ksp::orbit::Waypoint[] find_body pub sync fn find_body ( name : string ) -\u0026gt; Result\u0026lt;ksp::orbit::Body, string\u0026gt; "
},
{
	"uri": "https://untoldwind.github.io/KontrolSystem/reference/ksp_resource/",
	"title": "ksp::resource",
	"tags": [],
	"description": "",
	"content": "Provides functions to handle resources (like fuel, ore, etc)\nTypes ResourceDefinition Fields    Name Type Description     density float    display_name string    name string    transfer_mode string    unit_cost float    volume float     Methods start_resource_transfer resourcedefinition.start_resource_transfer ( transferFrom : ksp::vessel::Part[], transferTo : ksp::vessel::Part[], amount : float ) -\u0026gt; ksp::resource::ResourceTransfer ResourceTransfer Fields    Name Type Description     goal float    resource ksp::resource::ResourceDefinition    status string    status_message string    transferred float     Methods abort resourcetransfer.abort ( ) -\u0026gt; Unit Functions find_resource pub sync fn find_resource ( resourceName : string ) -\u0026gt; Result\u0026lt;ksp::resource::ResourceDefinition, string\u0026gt; "
},
{
	"uri": "https://untoldwind.github.io/KontrolSystem/reference/ksp_testing/",
	"title": "ksp::testing",
	"tags": [],
	"description": "",
	"content": "Functions assert_false pub sync fn assert_false ( actual : bool ) -\u0026gt; Unit Assert that actual is false (Test only)\nassert_float pub sync fn assert_float ( expected : float, actual : float, delta : float ) -\u0026gt; Unit Assert that actual float is almost equal to expected with an absolute tolerance of delta (Test only)\nassert_int pub sync fn assert_int ( expected : int, actual : int ) -\u0026gt; Unit Assert that actual integer is equal to expected (Test only)\nassert_none pub sync fn assert_none ( actual : Option\u0026lt;T\u0026gt; ) -\u0026gt; Unit assert_some pub sync fn assert_some ( expected : T, actual : Option\u0026lt;T\u0026gt; ) -\u0026gt; Unit assert_string pub sync fn assert_string ( expected : string, actual : string ) -\u0026gt; Unit Assert that actual string is equal to expected (Test only)\nassert_true pub sync fn assert_true ( actual : bool ) -\u0026gt; Unit Assert that actual is true (Test only)\nassert_vec2 pub sync fn assert_vec2 ( expected : ksp::math::Vec2, actual : ksp::math::Vec2, delta : float ) -\u0026gt; Unit assert_vec3 pub sync fn assert_vec3 ( expected : ksp::math::Vec3, actual : ksp::math::Vec3, delta : float ) -\u0026gt; Unit assert_yield pub sync fn assert_yield ( expected : int ) -\u0026gt; Unit Assert that test case has yielded expected number of times already (Async test only)\nfail_test pub sync fn fail_test ( message : string ) -\u0026gt; Unit Fail the test case with a message (Test only).\nsimulate_click pub sync fn simulate_click ( window : ksp::ui::WindowHandle\u0026lt;T\u0026gt;, path : int[] ) -\u0026gt; Unit test_sleep pub sync fn test_sleep ( millis : int ) -\u0026gt; Unit Suspend execution for millis\nyield pub fn yield ( ) -\u0026gt; Unit Yield the test case (Async test only)\n"
},
{
	"uri": "https://untoldwind.github.io/KontrolSystem/reference/ksp_ui/",
	"title": "ksp::ui",
	"tags": [],
	"description": "",
	"content": "Provides functions to create base UI windows and dialogs.\nTypes Button Methods expand_height button.expand_height ( ) -\u0026gt; ksp::ui::Button expand_width button.expand_width ( ) -\u0026gt; ksp::ui::Button height button.height ( height : float ) -\u0026gt; ksp::ui::Button max_height button.max_height ( height : float ) -\u0026gt; ksp::ui::Button max_width button.max_width ( width : float ) -\u0026gt; ksp::ui::Button min_height button.min_height ( height : float ) -\u0026gt; ksp::ui::Button min_width button.min_width ( width : float ) -\u0026gt; ksp::ui::Button width button.width ( width : float ) -\u0026gt; ksp::ui::Button Container Methods button container.button ( label : string, onClick : fn(T) -\u0026gt; T ) -\u0026gt; ksp::ui::Button expand_height container.expand_height ( ) -\u0026gt; ksp::ui::Container\u0026lt;T\u0026gt; expand_width container.expand_width ( ) -\u0026gt; ksp::ui::Container\u0026lt;T\u0026gt; height container.height ( height : float ) -\u0026gt; ksp::ui::Container\u0026lt;T\u0026gt; horizontal_layout container.horizontal_layout ( ) -\u0026gt; ksp::ui::Container\u0026lt;T\u0026gt; label container.label ( label : string ) -\u0026gt; ksp::ui::Label max_height container.max_height ( height : float ) -\u0026gt; ksp::ui::Container\u0026lt;T\u0026gt; max_width container.max_width ( width : float ) -\u0026gt; ksp::ui::Container\u0026lt;T\u0026gt; min_height container.min_height ( height : float ) -\u0026gt; ksp::ui::Container\u0026lt;T\u0026gt; min_width container.min_width ( width : float ) -\u0026gt; ksp::ui::Container\u0026lt;T\u0026gt; text_field container.text_field ( value : string, onUpdate : fn(T, string) -\u0026gt; T ) -\u0026gt; ksp::ui::TextField vertical_layout container.vertical_layout ( ) -\u0026gt; ksp::ui::Container\u0026lt;T\u0026gt; width container.width ( width : float ) -\u0026gt; ksp::ui::Container\u0026lt;T\u0026gt; Label Methods expand_height label.expand_height ( ) -\u0026gt; ksp::ui::Label expand_width label.expand_width ( ) -\u0026gt; ksp::ui::Label height label.height ( height : float ) -\u0026gt; ksp::ui::Label max_height label.max_height ( height : float ) -\u0026gt; ksp::ui::Label max_width label.max_width ( width : float ) -\u0026gt; ksp::ui::Label min_height label.min_height ( height : float ) -\u0026gt; ksp::ui::Label min_width label.min_width ( width : float ) -\u0026gt; ksp::ui::Label width label.width ( width : float ) -\u0026gt; ksp::ui::Label TextField Methods expand_height textfield.expand_height ( ) -\u0026gt; ksp::ui::TextField expand_width textfield.expand_width ( ) -\u0026gt; ksp::ui::TextField height textfield.height ( height : float ) -\u0026gt; ksp::ui::TextField max_height textfield.max_height ( height : float ) -\u0026gt; ksp::ui::TextField max_length textfield.max_length ( maxLength : int ) -\u0026gt; ksp::ui::TextField max_width textfield.max_width ( width : float ) -\u0026gt; ksp::ui::TextField min_height textfield.min_height ( height : float ) -\u0026gt; ksp::ui::TextField min_width textfield.min_width ( width : float ) -\u0026gt; ksp::ui::TextField width textfield.width ( width : float ) -\u0026gt; ksp::ui::TextField Window Fields    Name Type Description     title string     Methods button window.button ( label : string, onClick : fn(T) -\u0026gt; T ) -\u0026gt; ksp::ui::Button horizontal_layout window.horizontal_layout ( ) -\u0026gt; ksp::ui::Container\u0026lt;T\u0026gt; label window.label ( label : string ) -\u0026gt; ksp::ui::Label text_field window.text_field ( value : string, onUpdate : fn(T, string) -\u0026gt; T ) -\u0026gt; ksp::ui::TextField vertical_layout window.vertical_layout ( ) -\u0026gt; ksp::ui::Container\u0026lt;T\u0026gt; WindowHandle Fields    Name Type Description     closed bool    state T     Methods close windowhandle.close ( ) -\u0026gt; Unit Functions show_window pub sync fn show_window ( initialState : T, isEndState : fn(T) -\u0026gt; bool, render : fn(ksp::ui::Window\u0026lt;T\u0026gt;, T) -\u0026gt; Unit ) -\u0026gt; ksp::ui::WindowHandle\u0026lt;T\u0026gt; "
},
{
	"uri": "https://untoldwind.github.io/KontrolSystem/reference/ksp_vessel/",
	"title": "ksp::vessel",
	"tags": [],
	"description": "",
	"content": "Collection of types and functions to get information and control in-game vessels.\nTypes ActionGroups Fields    Name Type Description     abort bool    antennas bool    bays bool    brakes bool    chutes bool    custom1 bool    custom10 bool    custom2 bool    custom3 bool    custom4 bool    custom5 bool    custom6 bool    custom7 bool    custom8 bool    custom9 bool    gear bool    intakes bool    light bool    panels bool    radiators bool    rcs bool    sas bool     Methods deploy_fairings actiongroups.deploy_fairings ( ) -\u0026gt; Unit CrewMember Fields    Name Type Description     experience int    gender string    name string    part ksp::vessel::Part    trait string     Defaults Fields    Name Type Description     steering_pitch_ts float    steering_roll_ts float    steering_yaw_ts float     DeltaVEngineInfo Fields    Name Type Description     engine ksp::vessel::Engine    start_burn_stage int Number of the stage when engine is supposed to start    Methods get_ISP deltavengineinfo.get_ISP ( situation : string ) -\u0026gt; float Estimated ISP of the engine in a given situation\nget_thrust deltavengineinfo.get_thrust ( situation : string ) -\u0026gt; float Estimated thrust of the engine in a given situation\nget_thrust_vector deltavengineinfo.get_thrust_vector ( situation : string ) -\u0026gt; ksp::math::Vec3 Estimated thrust vector of the engine in a given situation\nDeployablePart Fields    Name Type Description     as_deployable Optionksp::vessel::DeployablePart    as_engine Optionksp::vessel::Engine    as_experiment Optionksp::vessel::Experiment    class_name string    is_moving bool    module_name string    part ksp::vessel::Part    position ksp::math::Vec3    tag string    vessel ksp::vessel::Vessel     Methods do_action deployablepart.do_action ( actionName : string, activate : bool ) -\u0026gt; Result\u0026lt;Unit, string\u0026gt; do_event deployablepart.do_event ( eventName : string ) -\u0026gt; Result\u0026lt;Unit, string\u0026gt; extend deployablepart.extend ( ) -\u0026gt; Unit has_action deployablepart.has_action ( actionName : string ) -\u0026gt; bool has_event deployablepart.has_event ( eventName : string ) -\u0026gt; bool has_field deployablepart.has_field ( fieldName : string ) -\u0026gt; bool retract deployablepart.retract ( ) -\u0026gt; Unit DockingNode Fields    Name Type Description     as_deployable Optionksp::vessel::DeployablePart    as_engine Optionksp::vessel::Engine    as_experiment Optionksp::vessel::Experiment    class_name string    module_name string    node_position ksp::math::Vec3    node_type string    part ksp::vessel::Part    port_facing ksp::math::Direction    position ksp::math::Vec3    state string    tag string    vessel ksp::vessel::Vessel     Methods control_from dockingnode.control_from ( ) -\u0026gt; Unit do_action dockingnode.do_action ( actionName : string, activate : bool ) -\u0026gt; Result\u0026lt;Unit, string\u0026gt; do_event dockingnode.do_event ( eventName : string ) -\u0026gt; Result\u0026lt;Unit, string\u0026gt; has_action dockingnode.has_action ( actionName : string ) -\u0026gt; bool has_event dockingnode.has_event ( eventName : string ) -\u0026gt; bool has_field dockingnode.has_field ( fieldName : string ) -\u0026gt; bool undock dockingnode.undock ( ) -\u0026gt; Unit Engine Fields    Name Type Description     as_deployable Optionksp::vessel::DeployablePart    as_engine Optionksp::vessel::Engine    as_experiment Optionksp::vessel::Experiment    class_name string    has_ignited bool    id string    is_flameout bool    is_shutdown bool    is_staged bool    max_thrust float    min_thrust float    module_name string    name string    part ksp::vessel::Part    position ksp::math::Vec3    tag string    type string    vessel ksp::vessel::Vessel     Methods activate engine.activate ( ) -\u0026gt; Unit do_action engine.do_action ( actionName : string, activate : bool ) -\u0026gt; Result\u0026lt;Unit, string\u0026gt; do_event engine.do_event ( eventName : string ) -\u0026gt; Result\u0026lt;Unit, string\u0026gt; has_action engine.has_action ( actionName : string ) -\u0026gt; bool has_event engine.has_event ( eventName : string ) -\u0026gt; bool has_field engine.has_field ( fieldName : string ) -\u0026gt; bool shutdown engine.shutdown ( ) -\u0026gt; Unit Experiment Fields    Name Type Description     as_deployable Optionksp::vessel::DeployablePart    as_engine Optionksp::vessel::Engine    as_experiment Optionksp::vessel::Experiment    class_name string    deployed bool    has_data bool    inoperable bool    module_name string    part ksp::vessel::Part    position ksp::math::Vec3    rerunnable bool    tag string    vessel ksp::vessel::Vessel     Methods deploy experiment.deploy ( ) -\u0026gt; Unit deploy_experiment experiment.deploy_experiment ( ) -\u0026gt; Result\u0026lt;Unit, string\u0026gt; do_action experiment.do_action ( actionName : string, activate : bool ) -\u0026gt; Result\u0026lt;Unit, string\u0026gt; do_event experiment.do_event ( eventName : string ) -\u0026gt; Result\u0026lt;Unit, string\u0026gt; dump_data experiment.dump_data ( ) -\u0026gt; Unit has_action experiment.has_action ( actionName : string ) -\u0026gt; bool has_event experiment.has_event ( eventName : string ) -\u0026gt; bool has_field experiment.has_field ( fieldName : string ) -\u0026gt; bool transmit_data experiment.transmit_data ( ) -\u0026gt; Result\u0026lt;Unit, string\u0026gt; Maneuver Fields    Name Type Description     available bool    nodes ksp::vessel::ManeuverNode[]    patch_limit int     Methods add maneuver.add ( ut : float, radialOut : float, normal : float, prograde : float ) -\u0026gt; Result\u0026lt;ksp::vessel::ManeuverNode, string\u0026gt; add_burn_vector maneuver.add_burn_vector ( ut : float, burnVector : ksp::math::Vec3 ) -\u0026gt; Result\u0026lt;ksp::vessel::ManeuverNode, string\u0026gt; next_node maneuver.next_node ( ) -\u0026gt; Result\u0026lt;ksp::vessel::ManeuverNode, string\u0026gt; ManeuverNode Fields    Name Type Description     burn_vector ksp::math::Vec3    ETA float    normal float    prograde float    radial_out float    time float     Methods remove maneuvernode.remove ( ) -\u0026gt; Unit Part Fields    Name Type Description     dry_mass float    has_physics bool    mass float    modules ksp::vessel::PartModule[]    part_id string    part_name string    tag string    vessel ksp::vessel::Vessel     Methods get_module part.get_module ( moduleName : string ) -\u0026gt; Option\u0026lt;ksp::vessel::PartModule\u0026gt; has_module part.has_module ( moduleName : string ) -\u0026gt; bool PartModule Fields    Name Type Description     as_deployable Optionksp::vessel::DeployablePart    as_engine Optionksp::vessel::Engine    as_experiment Optionksp::vessel::Experiment    class_name string    module_name string    part ksp::vessel::Part    position ksp::math::Vec3    tag string    vessel ksp::vessel::Vessel     Methods do_action partmodule.do_action ( actionName : string, activate : bool ) -\u0026gt; Result\u0026lt;Unit, string\u0026gt; do_event partmodule.do_event ( eventName : string ) -\u0026gt; Result\u0026lt;Unit, string\u0026gt; has_action partmodule.has_action ( actionName : string ) -\u0026gt; bool has_event partmodule.has_event ( eventName : string ) -\u0026gt; bool has_field partmodule.has_field ( fieldName : string ) -\u0026gt; bool SimulatedVessel Methods drag simulatedvessel.drag ( localVelocity : ksp::math::Vec3, dynamicPressurekPa : float, mach : float ) -\u0026gt; ksp::math::Vec3 lift simulatedvessel.lift ( localVelocity : ksp::math::Vec3, dynamicPressurekPa : float, mach : float ) -\u0026gt; ksp::math::Vec3 simulate simulatedvessel.simulate ( altATGL : float, altASL : float, endASL : float, pressure : float, shockTemp : float, time : float, semiDeployMultiplier : float ) -\u0026gt; bool will_chutes_deploy simulatedvessel.will_chutes_deploy ( altAGL : float, altASL : float, probableLandingSiteASL : float, pressure : float, shockTemp : float, t : float, parachuteSemiDeployMultiplier : float ) -\u0026gt; bool Stage Fields    Name Type Description     number int    ready bool     Methods next stage.next ( ) -\u0026gt; bool Targetable Fields    Name Type Description     body Optionksp::orbit::Body    docking_port Optionksp::vessel::DockingNode    name string    orbit ksp::orbit::Orbit    vessel Optionksp::vessel::Vessel     Vessel Represents an in-game vessel, which might be a rocket, plane, rover \u0026hellip; or actually just a Kerbal in a spacesuite.\nFields    Name Type Description     actions ksp::vessel::ActionGroups    air_speed float    altitude float    angular_momentum ksp::math::Vec3    angular_velocity ksp::math::Vec3    available_thrust float    can_separate bool    CoM ksp::math::Vec3    control_level string    crew ksp::vessel::CrewMember[]    crew_capacity int    defaults ksp::vessel::Defaults    docking_ports ksp::vessel::DockingNode[]    east ksp::math::Vec3    engines ksp::vessel::Engine[]    facing ksp::math::Direction    geo_coordinates ksp::orbit::GeoCoordinates    ground_speed float    heading float    horizontal_surface_speed float    is_active bool    is_commandable bool    is_eva bool    main_body ksp::orbit::Body    maneuver ksp::vessel::Maneuver    mass float    name string The name of the vessel.   north ksp::math::Vec3    orbit ksp::orbit::Orbit    orbital_velocity ksp::math::Vec3    parts ksp::vessel::Part[]    position ksp::math::Vec3    prograde ksp::math::Direction    retrograde ksp::math::Direction    sample_time float    stage ksp::vessel::Stage    status string    surface_velocity ksp::math::Vec3    target Optionksp::vessel::Targetable    up ksp::math::Vec3    velocity_heading float    vertical_speed float    vessel_type string    volumes ksp::vessel::Volume[]     Methods heading_direction vessel.heading_direction ( degreesFromNorth : float, pitchAboveHorizon : float, roll : float ) -\u0026gt; ksp::math::Direction heading_to vessel.heading_to ( geoCoordinates : ksp::orbit::GeoCoordinates ) -\u0026gt; float manage_rcs_translate vessel.manage_rcs_translate ( translateProvider : fn() -\u0026gt; ksp::math::Vec3 ) -\u0026gt; ksp::control::RCSTranslateManager manage_steering vessel.manage_steering ( directionProvider : fn() -\u0026gt; ksp::math::Direction ) -\u0026gt; ksp::control::SteeringManager manage_throttle vessel.manage_throttle ( throttleProvider : fn() -\u0026gt; float ) -\u0026gt; ksp::control::ThrottleManager manage_wheel_steering vessel.manage_wheel_steering ( bearingProvider : fn() -\u0026gt; float ) -\u0026gt; ksp::control::WheelSteeringManager manage_wheel_throttle vessel.manage_wheel_throttle ( throttleProvider : fn() -\u0026gt; float ) -\u0026gt; ksp::control::WheelThrottleManager release_control vessel.release_control ( ) -\u0026gt; Unit set_rcs_translate vessel.set_rcs_translate ( translate : ksp::math::Vec3 ) -\u0026gt; ksp::control::RCSTranslateManager set_steering vessel.set_steering ( direction : ksp::math::Direction ) -\u0026gt; ksp::control::SteeringManager set_throttle vessel.set_throttle ( throttle : float ) -\u0026gt; ksp::control::ThrottleManager set_wheel_steering vessel.set_wheel_steering ( bearing : float ) -\u0026gt; ksp::control::WheelSteeringManager set_wheel_throttle vessel.set_wheel_throttle ( throttle : float ) -\u0026gt; ksp::control::WheelThrottleManager simulated vessel.simulated ( limitStage : int ) -\u0026gt; ksp::vessel::SimulatedVessel stage_deltav vessel.stage_deltav ( stage : int ) -\u0026gt; Option\u0026lt;ksp::vessel::VesselDeltaV\u0026gt; Get delta-v information for a specific stage of the vessel, if existent.\nVesselDeltaV Fields    Name Type Description     active_engines ksp::vessel::DeltaVEngineInfo[]    burn_time float Estimated burn time of the stage.   dry_mass float Dry mass of the stage.   end_mass float End mass of the stage.   engines ksp::vessel::DeltaVEngineInfo[]    fuel_mass float Mass of the fuel in the stage.   stage int The stage number.   start_mass float Start mass of the stage.    Methods get_deltav vesseldeltav.get_deltav ( situation : string ) -\u0026gt; float Estimated delta-v of the stage in a given situation\nget_ISP vesseldeltav.get_ISP ( situation : string ) -\u0026gt; float Estimated ISP of the stage in a given situation\nget_thrust vesseldeltav.get_thrust ( situation : string ) -\u0026gt; float Estimated thrust of the stage in a given situation\nget_TWR vesseldeltav.get_TWR ( situation : string ) -\u0026gt; float Estimated TWR of the stage in a given situation\nVolume Methods get_bool volume.get_bool ( key : string, defaultValue : bool ) -\u0026gt; bool get_float volume.get_float ( key : string, defaultValue : float ) -\u0026gt; float get_int volume.get_int ( key : string, defaultValue : int ) -\u0026gt; int get_string volume.get_string ( key : string, defaultValue : string ) -\u0026gt; string has_bool volume.has_bool ( key : string ) -\u0026gt; bool has_float volume.has_float ( key : string ) -\u0026gt; bool has_int volume.has_int ( key : string ) -\u0026gt; bool has_string volume.has_string ( key : string ) -\u0026gt; bool set_bool volume.set_bool ( key : string, value : bool ) -\u0026gt; Unit set_float volume.set_float ( key : string, value : float ) -\u0026gt; Unit set_int volume.set_int ( key : string, value : int ) -\u0026gt; Unit set_string volume.set_string ( key : string, value : string ) -\u0026gt; Unit Constants    Name Type Description     SITUATION_ALTITUDE string Used for delta-v calculation at the current altitude.   SITUATION_SEALEVEL string Used for delta-v calculation at sea level of the current body.   SITUATION_VACUUM string Used for delta-v calculation in vacuum.   TYPE_BASE string Value of vessel.type if vessel is a planetary base.   TYPE_DEBIRS string Value of vessel.type if vessel is some space debris.   TYPE_EVA string Value of vessel.type if vessel is a Kerbal in EVA.   TYPE_FLAG string Value of vessel.type if vessel is a flag.   TYPE_LANDER string Value of vessel.type if vessel is a lander.   TYPE_PLANE string Value of vessel.type if vessel is a plane.   TYPE_PROBE string Value of vessel.type if vessel is a space probe.   TYPE_RELAY string Value of vessel.type if vessel is a communication relay satelite.   TYPE_SCIENCE_CONTROLLER string Value of vessel.type if vessel is a deployed science controller.   TYPE_SCIENCE_PART string Value of vessel.type if vessel is a deployed science part.   TYPE_SHIP string Value of vessel.type if vessel is a space ship.   TYPE_SPACEOBJECT string Value of vessel.type if vessel is some unspecified space object.   TYPE_UNKOWN string Value of vessel.type if the type of the vessel is unknown/undefined.    Functions active_vessel pub sync fn active_vessel ( ) -\u0026gt; Result\u0026lt;ksp::vessel::Vessel, string\u0026gt; Try to get the currently active vessel. Will result in an error if there is none.\nfind_vessel pub sync fn find_vessel ( vesselName : string ) -\u0026gt; Result\u0026lt;ksp::vessel::Vessel, string\u0026gt; "
},
{
	"uri": "https://untoldwind.github.io/KontrolSystem/reference/std_atmo/",
	"title": "std::atmo",
	"tags": [],
	"description": "",
	"content": "Functions atmo_launch pub fn atmo_launch ( target_apoapsis : float, heading : float ) -\u0026gt; Result\u0026lt;Unit, string\u0026gt; Automatically launch a rocket from an atmosphere to a circular orbit.\natmo_launch_ascent pub fn atmo_launch_ascent ( vessel : ksp::vessel::Vessel, target_apoapsis : float, heading : float ) -\u0026gt; Unit Perform a rocket launch ascent from an atmosphere.\nNote: The rocket will not end up in a stable orbit and most likely crash if no further action is taken.\n"
},
{
	"uri": "https://untoldwind.github.io/KontrolSystem/reference/std_lambert/",
	"title": "std::lambert",
	"tags": [],
	"description": "",
	"content": "Functions solve_lambert pub sync fn solve_lambert ( r1 : ksp::math::Vec3, r2 : ksp::math::Vec3, tof : float, mu : float, clockwise : bool ) -\u0026gt; (iters : int, v1 : ksp::math::Vec3, v2 : ksp::math::Vec3) Solve Lambert\u0026rsquo;s problem, i.e. calculate the Kepler orbit to get from point r1 to point r2 in time tof (time of flight).\n mu is the standard gravitational parameter of the central body clockwise defines if a clockwise or counter-clockwise orbit should be calculated The result v1 is the required velocity at r1 The result v2 is the required velocity at r2  This is based on the solver developed by Dario Izzo Details can be found here: https://arxiv.org/pdf/1403.2705.pdf Released under the GNU GENERAL PUBLIC LICENSE as part of the PyKEP library:\n"
},
{
	"uri": "https://untoldwind.github.io/KontrolSystem/reference/std_land_landing_simulation/",
	"title": "std::land::landing_simulation",
	"tags": [],
	"description": "",
	"content": "Types BodyParameters Fields    Name Type Description     aerobraked_radius float    angular_velocity ksp::math::Vec3    decel_radius float    grav_parameter float    speed_policy fn(ksp::math::Vec3, ksp::math::Vec3) -\u0026gt; float     Methods find_freefall_end_time bodyparameters.find_freefall_end_time ( orbit : ksp::orbit::Orbit, ut : float ) -\u0026gt; float freefall_ended bodyparameters.freefall_ended ( orbit : ksp::orbit::Orbit, ut : float ) -\u0026gt; bool grav_accel bodyparameters.grav_accel ( pos : ksp::math::Vec3 ) -\u0026gt; ksp::math::Vec3 surface_velocity bodyparameters.surface_velocity ( pos : ksp::math::Vec3, vel : ksp::math::Vec3 ) -\u0026gt; ksp::math::Vec3 total_accel bodyparameters.total_accel ( pos : ksp::math::Vec3, vel : ksp::math::Vec3 ) -\u0026gt; ksp::math::Vec3 SimulationState Fields    Name Type Description     body std::land::landing_simulation::BodyParameters    deltav_expended float    dt float    max_thrust_accel float    min_dt float    t float    v ksp::math::Vec3    x ksp::math::Vec3     Methods bs34_step simulationstate.bs34_step ( ) -\u0026gt; Unit limit_speed simulationstate.limit_speed ( ) -\u0026gt; Unit Functions init_simulation pub sync fn init_simulation ( vessel : ksp::vessel::Vessel, start_ut : float, start_dt : float, min_dt : float, max_thrust_accel : float, decel_end_altitude_asl : float, speed_policy : fn(ksp::math::Vec3, ksp::math::Vec3) -\u0026gt; float ) -\u0026gt; std::land::landing_simulation::SimulationState "
},
{
	"uri": "https://untoldwind.github.io/KontrolSystem/reference/std_land_lib/",
	"title": "std::land::lib",
	"tags": [],
	"description": "",
	"content": "Functions land_deorbit_delta_v pub sync fn land_deorbit_delta_v ( vessel : ksp::vessel::Vessel, alt : float ) -\u0026gt; Unit land_time_to_land pub sync fn land_time_to_land ( vessel : ksp::vessel::Vessel, longitude : float ) -\u0026gt; Unit "
},
{
	"uri": "https://untoldwind.github.io/KontrolSystem/reference/std_land_speed_policy/",
	"title": "std::land::speed_policy",
	"tags": [],
	"description": "",
	"content": "Types SpeedPolicy Functions gravity_turn_speed_policy pub sync fn gravity_turn_speed_policy ( terrain_radius : float, g : float, thrust : float ) -\u0026gt; fn(ksp::math::Vec3, ksp::math::Vec3) -\u0026gt; float powered_coast_speed_policy pub sync fn powered_coast_speed_policy ( terrain_radius : float, g : float, thrust : float ) -\u0026gt; fn(ksp::math::Vec3, ksp::math::Vec3) -\u0026gt; float safe_speed_policy pub sync fn safe_speed_policy ( terrain_radius : float, g : float, thrust : float ) -\u0026gt; fn(ksp::math::Vec3, ksp::math::Vec3) -\u0026gt; float "
},
{
	"uri": "https://untoldwind.github.io/KontrolSystem/reference/std_land_vac/",
	"title": "std::land::vac",
	"tags": [],
	"description": "",
	"content": "Functions vac_land pub fn vac_land ( vessel : ksp::vessel::Vessel, landing_side : ksp::orbit::GeoCoordinates ) -\u0026gt; Unit vac_land_prepare_deorbit pub fn vac_land_prepare_deorbit ( vessel : ksp::vessel::Vessel, landing_side : ksp::orbit::GeoCoordinates ) -\u0026gt; Unit "
},
{
	"uri": "https://untoldwind.github.io/KontrolSystem/reference/std_maneuvers/",
	"title": "std::maneuvers",
	"tags": [],
	"description": "",
	"content": "Collection of helper functions to plan and execute standard orbital maneuvers\nFunctions bi_impulsive_transfer pub sync fn bi_impulsive_transfer ( start : ksp::orbit::Orbit, target : ksp::orbit::Orbit, minUT : float ) -\u0026gt; Result\u0026lt;(delta_v : ksp::math::Vec3, UT : float), string\u0026gt; Calculate delta-v to intercept a target orbit starting after minUT. Actual starting and transfer time will be optimized for a minimal delta-v for acceleration and deacceleration.\nWill result in an error if maneuver nodes cannot be created (e.g. because command or tracking facility has not been sufficiently upgraded)\nbi_impulsive_transfer_near pub sync fn bi_impulsive_transfer_near ( start : ksp::orbit::Orbit, target : ksp::orbit::Orbit, UT : float, TT : float ) -\u0026gt; Result\u0026lt;(delta_v : ksp::math::Vec3, UT : float), string\u0026gt; Calculate delta-v to intercept a target orbit starting nearly at time UT with a nearly transfer time of TT. UT and TT will be optimized for a minimal delta-v for acceleration and deacceleration.\nchange_apoapsis pub sync fn change_apoapsis ( orbit : ksp::orbit::Orbit, UT : float, apoapsis_radius : float ) -\u0026gt; Result\u0026lt;ksp::math::Vec3, string\u0026gt; Calculate the required delta-v to change the apoapsis of an orbit to apoapsis_radius at time UT\nchange_periapsis pub sync fn change_periapsis ( orbit : ksp::orbit::Orbit, UT : float, periapsis_radius : float ) -\u0026gt; Result\u0026lt;ksp::math::Vec3, string\u0026gt; Calculate the required delta-v to change the periapsis of an orbit to periapsis_radius at time UT\ncircularize_orbit pub sync fn circularize_orbit ( orbit : ksp::orbit::Orbit ) -\u0026gt; (delta_v : ksp::math::Vec3, UT : float) Calculate the required delta-v and time to change the given orbit to a (mostly) circular orbit at the next apoapsis (if orbit is elliplic) or periapsis (if orbit is hyperbolic).\ncircularize_orbit_at pub sync fn circularize_orbit_at ( orbit : ksp::orbit::Orbit, UT : float ) -\u0026gt; ksp::math::Vec3 Calculate the required delta-v to change the given orbit to a (mostly) circular orbit at a given universal time UT.\nellipticize pub sync fn ellipticize ( orbit : ksp::orbit::Orbit, UT : float, periapsis : float, apoapsis : float ) -\u0026gt; ksp::math::Vec3 Calculate the required delta-v to change the apoapsis and periapsis of the given orbit at time UT.\nideal_ejection pub sync fn ideal_ejection ( body : ksp::orbit::Body, UT : float, radius : float, normal : ksp::math::Vec3, exit_velocity : ksp::math::Vec3 ) -\u0026gt; ksp::orbit::Orbit Calculate the ideal ejection from a (nearly) circular orbit around a given body, radius and normal vector. The resulting orbit is choosen so that the vessel will have a given exit_velocity on the SOI radius at time UT.\nintercept_at pub sync fn intercept_at ( start : ksp::orbit::Orbit, start_UT : float, target : ksp::orbit::Orbit, target_UT : float, offset_distance : float ) -\u0026gt; (start_velocity : ksp::math::Vec3, target_velocity : ksp::math::Vec3) Calculate required delta-v to intercept target orbit at time target_UT from start orbit at time start_UT. offset_distance may be used to define a desired distance to the target.\nnext_closest_approach_time pub sync fn next_closest_approach_time ( start : ksp::orbit::Orbit, target : ksp::orbit::Orbit, UT : float ) -\u0026gt; float "
},
{
	"uri": "https://untoldwind.github.io/KontrolSystem/reference/std_numerics_amoeba_optimize/",
	"title": "std::numerics::amoeba_optimize",
	"tags": [],
	"description": "",
	"content": "Functions amoeba_optimize pub sync fn amoeba_optimize ( func : fn(float, float) -\u0026gt; float, start_points : ksp::math::Vec2[], tolerance : float, max_iters : int ) -\u0026gt; Result\u0026lt;(iters : int, x : float, y : float), string\u0026gt; amoeba_optimize_perturbation pub sync fn amoeba_optimize_perturbation ( func : fn(float, float) -\u0026gt; float, guess : ksp::math::Vec2, perturbation : ksp::math::Vec2, tolerance : float, max_iters : int ) -\u0026gt; Result\u0026lt;(iters : int, x : float, y : float), string\u0026gt; "
},
{
	"uri": "https://untoldwind.github.io/KontrolSystem/reference/std_numerics_anneal_optimize/",
	"title": "std::numerics::anneal_optimize",
	"tags": [],
	"description": "",
	"content": "Functions anneal_optimize pub sync fn anneal_optimize ( func : fn(float, float) -\u0026gt; float, min : ksp::math::Vec2, max : ksp::math::Vec2, max_temp : float, iters : int, num_particles : int, cooling_rate : float ) -\u0026gt; (best : (f : float, x : float, y : float), points : (f : float, x : float, y : float)[]) "
},
{
	"uri": "https://untoldwind.github.io/KontrolSystem/reference/std_numerics_bessel/",
	"title": "std::numerics::bessel",
	"tags": [],
	"description": "",
	"content": "Functions J0 pub sync fn J0 ( x : float ) -\u0026gt; float J1 pub sync fn J1 ( x : float ) -\u0026gt; float "
},
{
	"uri": "https://untoldwind.github.io/KontrolSystem/reference/std_numerics_brent_optimize/",
	"title": "std::numerics::brent_optimize",
	"tags": [],
	"description": "",
	"content": "Functions brent_optimize pub sync fn brent_optimize ( func : fn(float) -\u0026gt; float, start_a : float, start_b : float, tolerance : float, max_iterations : int ) -\u0026gt; Result\u0026lt;(fx : float, x : float), string\u0026gt; "
},
{
	"uri": "https://untoldwind.github.io/KontrolSystem/reference/std_numerics_regula_falsi_solve/",
	"title": "std::numerics::regula_falsi_solve",
	"tags": [],
	"description": "",
	"content": "Functions regula_falsi_solve pub sync fn regula_falsi_solve ( func : fn(float) -\u0026gt; float, start_a : float, start_b : float, tolerance : float, max_iterations : int ) -\u0026gt; float "
},
{
	"uri": "https://untoldwind.github.io/KontrolSystem/reference/std_numerics_runge_kutta/",
	"title": "std::numerics::runge_kutta",
	"tags": [],
	"description": "",
	"content": "Functions rk23 pub sync fn rk23 ( accel : fn(float, ksp::math::Vec3, ksp::math::Vec3) -\u0026gt; ksp::math::Vec3, end_condition : fn(float, ksp::math::Vec3, ksp::math::Vec3) -\u0026gt; bool, start_t : float, start_position : ksp::math::Vec3, start_velocity : ksp::math::Vec3, min_dt : float, max_dt : float ) -\u0026gt; (position : ksp::math::Vec3, t : float, velocity : ksp::math::Vec3)[] "
},
{
	"uri": "https://untoldwind.github.io/KontrolSystem/reference/std_plane/",
	"title": "std::plane",
	"tags": [],
	"description": "",
	"content": "Functions plane_fly_to pub fn plane_fly_to ( vessel : ksp::vessel::Vessel, target_vec : ksp::math::Vec3, target_speed : float ) -\u0026gt; Result\u0026lt;Unit, string\u0026gt; plane_heading_of pub sync fn plane_heading_of ( vessel : ksp::vessel::Vessel, face : ksp::math::Vec3 ) -\u0026gt; float plane_launch_ssto pub fn plane_launch_ssto ( target_apoapsis : float, heading : float ) -\u0026gt; Result\u0026lt;Unit, string\u0026gt; plane_radar_altimeter pub sync fn plane_radar_altimeter ( vessel : ksp::vessel::Vessel ) -\u0026gt; float plane_rel_vec pub sync fn plane_rel_vec ( vessel : ksp::vessel::Vessel, face : ksp::math::Vec3 ) -\u0026gt; ksp::math::Vec3 plane_ssto_atmo_ascent pub fn plane_ssto_atmo_ascent ( vessel : ksp::vessel::Vessel, heading : float ) -\u0026gt; Result\u0026lt;Unit, string\u0026gt; plane_ssto_leave_atmo pub fn plane_ssto_leave_atmo ( vessel : ksp::vessel::Vessel, target_apoapsis : float, heading : float ) -\u0026gt; Result\u0026lt;Unit, string\u0026gt; plane_takeoff pub fn plane_takeoff ( vessel : ksp::vessel::Vessel, takeoff_speed : float, heading : float ) -\u0026gt; Result\u0026lt;Unit, string\u0026gt; Perform a takeoff of a plane.\nThe function will end once the plane has reached an altitude of 500 above ground. The plane will crash if no further action is taken.\n"
},
{
	"uri": "https://untoldwind.github.io/KontrolSystem/reference/std_plane_aerobrake/",
	"title": "std::plane::aerobrake",
	"tags": [],
	"description": "",
	"content": "Functions plane_aerobrake pub fn plane_aerobrake ( vessel : ksp::vessel::Vessel, target : ksp::orbit::GeoCoordinates ) -\u0026gt; Unit "
},
{
	"uri": "https://untoldwind.github.io/KontrolSystem/reference/std_plane_deorbit/",
	"title": "std::plane::deorbit",
	"tags": [],
	"description": "",
	"content": "Functions plane_deorbit pub fn plane_deorbit ( vessel : ksp::vessel::Vessel, landing_longitude : float ) -\u0026gt; Result\u0026lt;Unit, string\u0026gt; "
},
{
	"uri": "https://untoldwind.github.io/KontrolSystem/reference/std_plane_fly/",
	"title": "std::plane::fly",
	"tags": [],
	"description": "",
	"content": "Functions plane_fly_to pub fn plane_fly_to ( vessel : ksp::vessel::Vessel, target : ksp::math::Vec3, target_speed : float ) -\u0026gt; Unit "
},
{
	"uri": "https://untoldwind.github.io/KontrolSystem/reference/std_plane_land/",
	"title": "std::plane::land",
	"tags": [],
	"description": "",
	"content": "Functions plane_land pub fn plane_land ( vessel : ksp::vessel::Vessel, runway_start : ksp::orbit::GeoCoordinates, runway_end : ksp::orbit::GeoCoordinates, landing_speed : float, landing_v_speed : float ) -\u0026gt; Unit plane_land_ssto pub fn plane_land_ssto ( vessel : ksp::vessel::Vessel ) -\u0026gt; Result\u0026lt;Unit, string\u0026gt; "
},
{
	"uri": "https://untoldwind.github.io/KontrolSystem/reference/std_plane_launch/",
	"title": "std::plane::launch",
	"tags": [],
	"description": "",
	"content": "Constants    Name Type Description     AirBreathingAlt float    ClimbDefaultPitch float    GTAltitude float    TGTAirSpeed float     Functions plane_launch_ssto pub fn plane_launch_ssto ( vessel : ksp::vessel::Vessel, target_apoapsis : float, heading : float ) -\u0026gt; Result\u0026lt;Unit, string\u0026gt; plane_ssto_atmo_ascent pub fn plane_ssto_atmo_ascent ( vessel : ksp::vessel::Vessel, heading : float ) -\u0026gt; Result\u0026lt;Unit, string\u0026gt; plane_ssto_leave_atmo pub fn plane_ssto_leave_atmo ( vessel : ksp::vessel::Vessel, target_apoapsis : float, heading : float ) -\u0026gt; Result\u0026lt;Unit, string\u0026gt; "
},
{
	"uri": "https://untoldwind.github.io/KontrolSystem/reference/std_plane_lib/",
	"title": "std::plane::lib",
	"tags": [],
	"description": "",
	"content": "Functions desert_runway pub sync fn desert_runway ( ) -\u0026gt; Result\u0026lt;(ksp::orbit::GeoCoordinates, ksp::orbit::GeoCoordinates), string\u0026gt; island_runway pub sync fn island_runway ( ) -\u0026gt; Result\u0026lt;(ksp::orbit::GeoCoordinates, ksp::orbit::GeoCoordinates), string\u0026gt; ksc_runway pub sync fn ksc_runway ( ) -\u0026gt; Result\u0026lt;(ksp::orbit::GeoCoordinates, ksp::orbit::GeoCoordinates), string\u0026gt; plane_has_multi_mode_engine pub sync fn plane_has_multi_mode_engine ( vessel : ksp::vessel::Vessel ) -\u0026gt; bool plane_rel_vec pub sync fn plane_rel_vec ( vessel : ksp::vessel::Vessel, face : ksp::math::Vec3 ) -\u0026gt; ksp::math::Vec3 plane_switch_atmo pub sync fn plane_switch_atmo ( vessel : ksp::vessel::Vessel ) -\u0026gt; Unit "
},
{
	"uri": "https://untoldwind.github.io/KontrolSystem/reference/std_plane_takeoff/",
	"title": "std::plane::takeoff",
	"tags": [],
	"description": "",
	"content": "Functions plane_takeoff pub fn plane_takeoff ( vessel : ksp::vessel::Vessel, takeoff_speed : float, heading : float ) -\u0026gt; Result\u0026lt;Unit, string\u0026gt; Perform a takeoff of a plane.\nThe function will end once the plane has reached an altitude of 500 above ground. The plane will crash if no further action is taken.\n"
},
{
	"uri": "https://untoldwind.github.io/KontrolSystem/reference/std_rendezvous_dock/",
	"title": "std::rendezvous::dock",
	"tags": [],
	"description": "",
	"content": "Functions choose_docking_ports pub sync fn choose_docking_ports ( vessel : ksp::vessel::Vessel, target : ksp::vessel::Targetable ) -\u0026gt; Result\u0026lt;(target_port : ksp::vessel::DockingNode, vessel_port : ksp::vessel::DockingNode), string\u0026gt; dock_approach pub fn dock_approach ( vessel : ksp::vessel::Vessel, target_port : ksp::vessel::DockingNode ) -\u0026gt; Result\u0026lt;Unit, string\u0026gt; dock_move_correct_side pub fn dock_move_correct_side ( vessel : ksp::vessel::Vessel, target_port : ksp::vessel::DockingNode ) -\u0026gt; Result\u0026lt;Unit, string\u0026gt; dock_vessel pub fn dock_vessel ( vessel : ksp::vessel::Vessel, target : ksp::vessel::Targetable ) -\u0026gt; Result\u0026lt;Unit, string\u0026gt; "
},
{
	"uri": "https://untoldwind.github.io/KontrolSystem/reference/std_rendezvous_lib/",
	"title": "std::rendezvous::lib",
	"tags": [],
	"description": "",
	"content": "Functions approach_target pub fn approach_target ( ) -\u0026gt; Result\u0026lt;Unit, string\u0026gt; "
},
{
	"uri": "https://untoldwind.github.io/KontrolSystem/reference/std_staging/",
	"title": "std::staging",
	"tags": [],
	"description": "",
	"content": "Collection of helper functions to control staging of a vessel\nFunctions has_flameout pub sync fn has_flameout ( vessel : ksp::vessel::Vessel ) -\u0026gt; bool trigger_staging pub fn trigger_staging ( vessel : ksp::vessel::Vessel ) -\u0026gt; bool Helper function to automatically trigger staging during a burn.\nThis function is just checking if one of the ignited engines has has a flameout, which in most cases means that the current stage has burned out.\nWill return true if stating has been triggered.\n"
},
{
	"uri": "https://untoldwind.github.io/KontrolSystem/reference/std_utils/",
	"title": "std::utils",
	"tags": [],
	"description": "",
	"content": "Collection of helper functions not fitting anywhere else\nFunctions angle_to_360 pub sync fn angle_to_360 ( angle : float ) -\u0026gt; float remove_all_nodes pub sync fn remove_all_nodes ( vessel : ksp::vessel::Vessel ) -\u0026gt; Unit Removes all maneuvering nodes from the flight plan of a vessel.\nship_is_facing pub sync fn ship_is_facing ( vessel : ksp::vessel::Vessel, desired_facing : ksp::math::Vec3, max_deviation_degrees : float, max_angular_velocity : float ) -\u0026gt; bool Determine if vessel is facing a given direction.\n max_deviation_degrees sets a limit how many degrees the angle may differ max_angular_velocity sets a limit how much the vessel may still be turning  vessel_heading_of pub sync fn vessel_heading_of ( vessel : ksp::vessel::Vessel, face : ksp::math::Vec3 ) -\u0026gt; float vessel_pitch pub sync fn vessel_pitch ( vessel : ksp::vessel::Vessel ) -\u0026gt; float vessel_radar_altimeter pub sync fn vessel_radar_altimeter ( vessel : ksp::vessel::Vessel ) -\u0026gt; float "
},
{
	"uri": "https://untoldwind.github.io/KontrolSystem/reference/std_vac/",
	"title": "std::vac",
	"tags": [],
	"description": "",
	"content": "Functions estimate_burn_time pub sync fn estimate_burn_time ( vessel : ksp::vessel::Vessel, delta_v : float, stage_delay : float, throttle_limit : float ) -\u0026gt; (burn_time : float, half_burn_time : float) Estimate the required burn time for a desired delta_v in vacuum.\n stage_delay is the assumed amount of seconds required for staging throttle_limit is a limit for the throttle to be considered  exec_next_node pub fn exec_next_node ( vessel : ksp::vessel::Vessel ) -\u0026gt; Result\u0026lt;Unit, string\u0026gt; Execute the next planed maneuver node.\nWill result in an error if there are no planed maneuver nodes.\n"
},
{
	"uri": "https://untoldwind.github.io/KontrolSystem/reference/std_warp/",
	"title": "std::warp",
	"tags": [],
	"description": "",
	"content": "Collection of helper functions to control time warp.\nFunctions phys_warp pub fn phys_warp ( warp : int ) -\u0026gt; Unit Set physics warp.\nrails_warp pub fn rails_warp ( warp : int ) -\u0026gt; Unit Set rails warp.\nreset_warp pub fn reset_warp ( ) -\u0026gt; Unit Reset warp to its default state.\nwarp_seconds pub fn warp_seconds ( seconds : float ) -\u0026gt; Unit Warp a given number of seconds into the future.\nWill automatically toggle between rails and pythics warping depending how far the future is.\n"
},
{
	"uri": "https://untoldwind.github.io/KontrolSystem/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://untoldwind.github.io/KontrolSystem/interna/yield/",
	"title": "Yield",
	"tags": [],
	"description": "",
	"content": "Yield! \u0026hellip; or pretend to know what you are doing "
}]