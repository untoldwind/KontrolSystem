<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>KontrolSystem</title>
    <link>https://untoldwind.github.io/KontrolSystem/</link>
    <description>Recent content on KontrolSystem</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://untoldwind.github.io/KontrolSystem/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>core::logging</title>
      <link>https://untoldwind.github.io/KontrolSystem/reference/core_logging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://untoldwind.github.io/KontrolSystem/reference/core_logging/</guid>
      <description>Provides basic logging. In KSP all log messages will apear in the debug console as well as the KSP.log file.
Functions debug pub sync fn debug ( message : string ) -&amp;gt; Unit Write a debug-level message.
error pub sync fn error ( message : string ) -&amp;gt; Unit Write an error-level message.
info pub sync fn info ( message : string ) -&amp;gt; Unit Write an info-level message.
warning pub sync fn warning ( message : string ) -&amp;gt; Unit Write a warning-level message.</description>
    </item>
    
    <item>
      <title>core::math</title>
      <link>https://untoldwind.github.io/KontrolSystem/reference/core_math/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://untoldwind.github.io/KontrolSystem/reference/core_math/</guid>
      <description>Collection of basic mathematical functions.
Types Random Random number generator
Methods next_float random.next_float ( ) -&amp;gt; float Get next random number between 0.0 and 1.0
next_gaussian random.next_gaussian ( mu : float, sigma : float ) -&amp;gt; float Get next gaussian distributed random number
next_int random.next_int ( min : int, max : int ) -&amp;gt; int Get next random number between min and max
Constants    Name Type Description     DEG_TO_RAD float Multiplicator to convert an angle of degree to radian.</description>
    </item>
    
    <item>
      <title>core::testing</title>
      <link>https://untoldwind.github.io/KontrolSystem/reference/core_testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://untoldwind.github.io/KontrolSystem/reference/core_testing/</guid>
      <description>Provides basic assertions for testing. All functions provided by this module should be only used by test function.
Functions assert_false pub sync fn assert_false ( actual : bool ) -&amp;gt; Unit Assert that actual is false (Test only)
assert_float pub sync fn assert_float ( expected : float, actual : float, delta : float ) -&amp;gt; Unit Assert that actual float is almost equal to expected with an absolute tolerance of delta (Test only)</description>
    </item>
    
    <item>
      <title>ksp::console</title>
      <link>https://untoldwind.github.io/KontrolSystem/reference/ksp_console/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://untoldwind.github.io/KontrolSystem/reference/ksp_console/</guid>
      <description>Provides functions to interact with the in-game KontrolSystem Console. As of now the console is output- and monochrome-only, this might change in the future.
Additionally there is support for displaying popup messages on the HUD.
Types RgbaColor Interface color with alpha channel.
Constants    Name Type Description     BLUE ksp::console::RgbaColor Color blue   CYAN ksp::console::RgbaColor Color cyan   GREEN ksp::console::RgbaColor Color green   RED ksp::console::RgbaColor Color red   YELLOW ksp::console::RgbaColor Color yellow    Functions clear pub sync fn clear ( ) -&amp;gt; Unit Clear the console of all its content and move cursor to (0, 0).</description>
    </item>
    
    <item>
      <title>ksp::control</title>
      <link>https://untoldwind.github.io/KontrolSystem/reference/ksp_control/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://untoldwind.github.io/KontrolSystem/reference/ksp_control/</guid>
      <description>Types MovingAverage Fields    Name Type Description     mean float    sample_limit int    value_count int     Methods reset movingaverage.reset ( ) -&amp;gt; Unit update movingaverage.update ( value : float ) -&amp;gt; float PIDLoop Fields    Name Type Description     change_rate float    d_term float    error float    error_sum float    extra_unwind bool    i_term float    input float    kd float    ki float    kp float    last_sample_time float    max_output float    min_output float    output float    p_term float    setpoint float     Methods update pidloop.</description>
    </item>
    
    <item>
      <title>ksp::debug</title>
      <link>https://untoldwind.github.io/KontrolSystem/reference/ksp_debug/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://untoldwind.github.io/KontrolSystem/reference/ksp_debug/</guid>
      <description>Provides utility functions to draw in-game markers that can be helpful to visualize why an algorithm went haywire.
Types DebugVector Represents a debugging vector in the current scene.
Fields    Name Type Description     color ksp::console::RgbaColor The color of the debugging vector   pointy bool Controls if an arrow should be drawn at the end.   scale float    start ksp::math::Vec3 The current starting position of the debugging vector.</description>
    </item>
    
    <item>
      <title>ksp::game</title>
      <link>https://untoldwind.github.io/KontrolSystem/reference/ksp_game/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://untoldwind.github.io/KontrolSystem/reference/ksp_game/</guid>
      <description>Collection to game and runtime related functions.
Functions current_scene pub sync fn current_scene ( ) -&amp;gt; string Get the current game scene.
Results may be:
 SPACECENTER: Game is currently showing the outside of the space center. EDITOR: Game is currently showing the VAB or SPH. FLIGHT: Game is currently in flight of a vessel. TRACKINGSTATION: Game is currently showing the tracking station.  current_time pub sync fn current_time ( ) -&amp;gt; float Get the current universal time (UT) in seconds from start.</description>
    </item>
    
    <item>
      <title>ksp::game::warp</title>
      <link>https://untoldwind.github.io/KontrolSystem/reference/ksp_game_warp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://untoldwind.github.io/KontrolSystem/reference/ksp_game_warp/</guid>
      <description>Collection of functions to control time warp.
Constants    Name Type Description     PHYSICS string Value of current_warp_mode if in physics warp.   RAILS string Value of current_warp_mode if warp is on rails.    Functions cancel pub sync fn cancel ( ) -&amp;gt; Unit Cancel time warp
current_index pub sync fn current_index ( ) -&amp;gt; int Get the current warp index. Actual factor depends on warp mode.</description>
    </item>
    
    <item>
      <title>ksp::math</title>
      <link>https://untoldwind.github.io/KontrolSystem/reference/ksp_math/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://untoldwind.github.io/KontrolSystem/reference/ksp_math/</guid>
      <description>Collection of KSP/Unity related mathematical functions.
Types Direction Represents the rotation from an initial coordinate system when looking down the z-axis and &amp;ldquo;up&amp;rdquo; being the y-axis
Fields    Name Type Description     euler ksp::math::Vec3 Euler angles in degree of the rotation   pitch float Pitch in degree   right_vector ksp::math::Vec3 Right vector of the rotation   roll float Roll in degree   up_vector ksp::math::Vec3 Up vector of the rotation   vector ksp::math::Vec3 Fore vector of the rotation (i.</description>
    </item>
    
    <item>
      <title>ksp::orbit</title>
      <link>https://untoldwind.github.io/KontrolSystem/reference/ksp_orbit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://untoldwind.github.io/KontrolSystem/reference/ksp_orbit/</guid>
      <description>Types Body Represents an in-game celestrial body.
Fields    Name Type Description     atmosphere_depth float Depth/height of the atmosphere if present.   grav_parameter float Standard gravitation parameter of the body.   has_atmosphere bool true if the celestrial body has an atmosphere to deal with.   name string Name of the celestrial body.   orbit ksp::orbit::Orbit The orbit of the celestrial body itself (around the parent body)   position ksp::math::Vec3    radius float Radius of the body at sea level   SOI_radius float Radius of the sphere of influence of the body   up ksp::math::Vec3     Methods create_orbit body.</description>
    </item>
    
    <item>
      <title>ksp::testing</title>
      <link>https://untoldwind.github.io/KontrolSystem/reference/ksp_testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://untoldwind.github.io/KontrolSystem/reference/ksp_testing/</guid>
      <description>Functions assert_false pub sync fn assert_false ( actual : bool ) -&amp;gt; Unit Assert that actual is false (Test only)
assert_float pub sync fn assert_float ( expected : float, actual : float, delta : float ) -&amp;gt; Unit Assert that actual float is almost equal to expected with an absolute tolerance of delta (Test only)
assert_int pub sync fn assert_int ( expected : int, actual : int ) -&amp;gt; Unit Assert that actual integer is equal to expected (Test only)</description>
    </item>
    
    <item>
      <title>ksp::vessel</title>
      <link>https://untoldwind.github.io/KontrolSystem/reference/ksp_vessel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://untoldwind.github.io/KontrolSystem/reference/ksp_vessel/</guid>
      <description>Collection of types and functions to get information and control in-game vessels.
Types ActionGroups Fields    Name Type Description     abort bool    antennas bool    breaks bool    custom1 bool    custom10 bool    custom2 bool    custom3 bool    custom4 bool    custom5 bool    custom6 bool    custom7 bool    custom8 bool    custom9 bool    gear bool    light bool    panels bool    radiators bool    rcs bool    sas bool     Methods deploy_fairings actiongroups.</description>
    </item>
    
    <item>
      <title>std::atmo</title>
      <link>https://untoldwind.github.io/KontrolSystem/reference/std_atmo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://untoldwind.github.io/KontrolSystem/reference/std_atmo/</guid>
      <description>Functions atmo_launch pub fn atmo_launch ( target_apoapsis : float, heading : float ) -&amp;gt; Result&amp;lt;Unit, string&amp;gt; atmo_launch_ascent pub fn atmo_launch_ascent ( vessel : ksp::vessel::Vessel, target_apoapsis : float, heading : float ) -&amp;gt; Unit </description>
    </item>
    
    <item>
      <title>std::lambert</title>
      <link>https://untoldwind.github.io/KontrolSystem/reference/std_lambert/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://untoldwind.github.io/KontrolSystem/reference/std_lambert/</guid>
      <description>Functions solve_lambert pub sync fn solve_lambert ( r1 : ksp::math::Vec3, r2 : ksp::math::Vec3, tof : float, mu : float, clockwise : bool ) -&amp;gt; (iters : int, v1 : ksp::math::Vec3, v2 : ksp::math::Vec3) Solve Lambert&#39;s problem, i.e. calculate the Kepler orbit to get from point r1 to point r2 in time tof (time of flight).
 mu is the standard gravitational parameter of the central body clockwise defines if a clockwise or counter-clockwise orbit should be calculated The result v1 is the required velocity at r1 The result v2 is the required velocity at r2  This is based on the solver developed by Dario Izzo Details can be found here: https://arxiv.</description>
    </item>
    
    <item>
      <title>std::maneuvers</title>
      <link>https://untoldwind.github.io/KontrolSystem/reference/std_maneuvers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://untoldwind.github.io/KontrolSystem/reference/std_maneuvers/</guid>
      <description>Collection of helper functions to plan and execute standard orbital maneuvers
Functions bi_impulsive_transfer pub sync fn bi_impulsive_transfer ( start : ksp::orbit::Orbit, target : ksp::orbit::Orbit, minUT : float ) -&amp;gt; Result&amp;lt;(delta_v : ksp::math::Vec3, UT : float), string&amp;gt; Calculate delta-v to intercept a target orbit starting after minUT. Actual starting and transfer time will be optimized for a minimal delta-v for acceleration and deacceleration.
Will result in an error if maneuver nodes cannot be created (e.</description>
    </item>
    
    <item>
      <title>std::numerics::amoeba_optimize</title>
      <link>https://untoldwind.github.io/KontrolSystem/reference/std_numerics_amoeba_optimize/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://untoldwind.github.io/KontrolSystem/reference/std_numerics_amoeba_optimize/</guid>
      <description>Functions amoeba_optimize pub sync fn amoeba_optimize ( func : fn(float, float) -&amp;gt; float, points : ksp::math::Vec2[], tolerance : float, max_iters : int ) -&amp;gt; Result&amp;lt;(iters : int, x : float, y : float), string&amp;gt; amoeba_optimize_perturbation pub sync fn amoeba_optimize_perturbation ( func : fn(float, float) -&amp;gt; float, guess : ksp::math::Vec2, perturbation : ksp::math::Vec2, tolerance : float, max_iters : int ) -&amp;gt; Result&amp;lt;(iters : int, x : float, y : float), string&amp;gt; </description>
    </item>
    
    <item>
      <title>std::numerics::anneal_optimize</title>
      <link>https://untoldwind.github.io/KontrolSystem/reference/std_numerics_anneal_optimize/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://untoldwind.github.io/KontrolSystem/reference/std_numerics_anneal_optimize/</guid>
      <description>Functions anneal_optimize pub sync fn anneal_optimize ( func : fn(float, float) -&amp;gt; float, min : ksp::math::Vec2, max : ksp::math::Vec2, max_temp : float, iters : int, num_particles : int, cooling_rate : float ) -&amp;gt; (best : (f : float, x : float, y : float), points : (f : float, x : float, y : float)[]) </description>
    </item>
    
    <item>
      <title>std::numerics::bessel</title>
      <link>https://untoldwind.github.io/KontrolSystem/reference/std_numerics_bessel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://untoldwind.github.io/KontrolSystem/reference/std_numerics_bessel/</guid>
      <description>Functions J0 pub sync fn J0 ( x : float ) -&amp;gt; float J1 pub sync fn J1 ( x : float ) -&amp;gt; float </description>
    </item>
    
    <item>
      <title>std::numerics::brent_optimize</title>
      <link>https://untoldwind.github.io/KontrolSystem/reference/std_numerics_brent_optimize/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://untoldwind.github.io/KontrolSystem/reference/std_numerics_brent_optimize/</guid>
      <description>Functions brent_optimize pub sync fn brent_optimize ( func : fn(float) -&amp;gt; float, a : float, b : float, tolerance : float, max_iterations : int ) -&amp;gt; Result&amp;lt;(fx : float, x : float), string&amp;gt; </description>
    </item>
    
    <item>
      <title>std::numerics::regula_falsi_solve</title>
      <link>https://untoldwind.github.io/KontrolSystem/reference/std_numerics_regula_falsi_solve/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://untoldwind.github.io/KontrolSystem/reference/std_numerics_regula_falsi_solve/</guid>
      <description>Functions regula_falsi_solve pub sync fn regula_falsi_solve ( func : fn(float) -&amp;gt; float, a : float, b : float, tolerance : float, max_iterations : int ) -&amp;gt; float </description>
    </item>
    
    <item>
      <title>std::numerics::runge_kutta</title>
      <link>https://untoldwind.github.io/KontrolSystem/reference/std_numerics_runge_kutta/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://untoldwind.github.io/KontrolSystem/reference/std_numerics_runge_kutta/</guid>
      <description>Functions rk23 pub sync fn rk23 ( accel : fn(float, ksp::math::Vec3, ksp::math::Vec3) -&amp;gt; ksp::math::Vec3, end_condition : fn(float, ksp::math::Vec3, ksp::math::Vec3) -&amp;gt; bool, start_t : float, start_position : ksp::math::Vec3, start_velocity : ksp::math::Vec3, min_dt : float, max_dt : float ) -&amp;gt; (position : ksp::math::Vec3, t : float, velocity : ksp::math::Vec3)[] </description>
    </item>
    
    <item>
      <title>std::staging</title>
      <link>https://untoldwind.github.io/KontrolSystem/reference/std_staging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://untoldwind.github.io/KontrolSystem/reference/std_staging/</guid>
      <description>Collection of helper functions to control staging of a vessel
Functions trigger_staging pub fn trigger_staging ( vessel : ksp::vessel::Vessel ) -&amp;gt; bool Helper function to automatically trigger staging during a burn.
This function is just checking if one of the ignited engines has has a flameout, which in most cases means that the current stage has burned out.
Will return true if stating has been triggered.</description>
    </item>
    
    <item>
      <title>std::utils</title>
      <link>https://untoldwind.github.io/KontrolSystem/reference/std_utils/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://untoldwind.github.io/KontrolSystem/reference/std_utils/</guid>
      <description>Collection of helper functions not fitting anywhere else
Functions remove_all_nodes pub sync fn remove_all_nodes ( vessel : ksp::vessel::Vessel ) -&amp;gt; Unit Removes all maneuvering nodes from the flight plan of a vessel.
ship_is_facing pub sync fn ship_is_facing ( vessel : ksp::vessel::Vessel, desired_facing : ksp::math::Vec3, max_deviation_degrees : float, max_angular_velocity : float ) -&amp;gt; bool Determine if vessel is facing a given direction.
 max_deviation_degrees sets a limit how many degrees the angle may differ max_angular_velocity sets a limit how much the vessel may still be turning  </description>
    </item>
    
    <item>
      <title>std::vac</title>
      <link>https://untoldwind.github.io/KontrolSystem/reference/std_vac/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://untoldwind.github.io/KontrolSystem/reference/std_vac/</guid>
      <description>Functions estimate_burn_time pub sync fn estimate_burn_time ( vessel : ksp::vessel::Vessel, delta_v : float, stage_delay : float, throttle_limit : float ) -&amp;gt; (burn_time : float, half_burn_time : float) Estimate the required burn time for a desired delta_v in vacuum.
 stage_delay is the assumed amount of seconds required for staging throttle_limit is a limit for the throttle to be considered  exec_next_node pub fn exec_next_node ( vessel : ksp::vessel::Vessel ) -&amp;gt; Result&amp;lt;Unit, string&amp;gt; Execute the next planed maneuver node.</description>
    </item>
    
    <item>
      <title>std::warp</title>
      <link>https://untoldwind.github.io/KontrolSystem/reference/std_warp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://untoldwind.github.io/KontrolSystem/reference/std_warp/</guid>
      <description>Collection of helper functions to control time warp.
Functions phys_warp pub fn phys_warp ( warp : int ) -&amp;gt; Unit Set physics warp.
rails_warp pub fn rails_warp ( warp : int ) -&amp;gt; Unit Set rails warp.
reset_warp pub fn reset_warp ( ) -&amp;gt; Unit Reset warp to its default state.
warp_seconds pub fn warp_seconds ( seconds : float ) -&amp;gt; Unit Warp a given number of seconds into the future.</description>
    </item>
    
    <item>
      <title>Yield</title>
      <link>https://untoldwind.github.io/KontrolSystem/interna/yield/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://untoldwind.github.io/KontrolSystem/interna/yield/</guid>
      <description>Yield! &amp;hellip; or pretend to know what you are doing </description>
    </item>
    
  </channel>
</rss>