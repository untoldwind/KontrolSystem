use * from core::testing
use { TestStruct1 } from lib_test::structs

struct Test1 {
    i1: int
    i2: int
    f1: float
    f2: float
    s1: string
    s2: string
}

impl Test1 {
    fn immutable1(self) -> int = 100 * self.i1 + self.i2
    
    fn immutable2(self, i: int) -> int = self.i1 * i
    
    fn set_i1(let self, i: int) -> Unit = {
        self.i1 = i
    }
}

test sync fn test_test1_struct() -> Unit = {
    const t1 = <Test1>(i1: 12, i2: 34, f1: 45.67, f2: 89.01, s1: "string1", s2: "string2")
    
    assert_int(12, t1.i1)
    assert_int(34, t1.i2)
    assert_float(45.67, t1.f1)
    assert_float(89.01, t1.f2)
    assert_string("string1", t1.s1)
    assert_string("string2", t1.s2)
    
    assert_int(1234, t1.immutable1())
    assert_int(24, t1.immutable2(2))
}

test sync fn test_test1_struct_mutate() -> Unit = {
    let t1 = <Test1>(i1: 12, i2: 34, f1: 45.67, f2: 89.01, s1: "string1", s2: "string2")

    assert_int(12, t1.i1)
    assert_int(34, t1.i2)
    
    t1.set_i1(45)
    
    assert_int(45, t1.i1)
    assert_int(34, t1.i2)
}

test sync fn test_imported_struct() -> Unit = {
    const t1 = <TestStruct1>(field1: 12, field2: 34)

    assert_int(12, t1.field1)
    assert_int(34, t1.field2)
    
    assert_int(46, t1.sum())
    assert_int(408, t1.mul())
}