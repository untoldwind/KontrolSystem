use * from core::testing

test sync fn test_basic_result() -> Unit = {
    let result_int : Result<int, string> = Ok(123 * 10 + 4)

    assert_true(result_int.success)
    assert_int(1234, result_int.value)

    result_int = Err("Something wrong")

    assert_false(result_int.success)
    assert_int(0, result_int.value)
    assert_string("Something wrong", result_int.error)
}

test sync fn test_basic_unit_result() -> Unit = {
    let result_unit : Result<Unit, string> = Ok({})

    assert_true(result_unit.success)

    result_unit = Err("Something wrong")

    assert_false(result_unit.success)
    assert_string("Something wrong", result_unit.error)
}

test sync fn test_base_emty_error() -> Unit = {
    let result_int : Result<int, Unit> = Ok(123 * 10 + 4)

    assert_true(result_int.success)
    assert_int(1234, result_int.value)

    result_int = Err({})

    assert_false(result_int.success)
    assert_int(0, result_int.value)
}

test sync fn test_unit_unit_result() -> Unit = {
    let result_unit : Result<Unit, Unit> = Ok({})

    assert_true(result_unit.success)

    result_unit = Err({})

    assert_false(result_unit.success)
}

sync fn lifted_add(a: Result<int, string>, b: Result<int, string>) -> Result<int, string> = Ok(a? + b?)

test sync fn test_unwrap_result() -> Unit = {
    let result_int = lifted_add(Ok(1200), Ok(34))

    assert_true(result_int.success)
    assert_int(1234, result_int.value)

    result_int = lifted_add(Err("Error 1"), Ok(34))

    assert_false(result_int.success)
    assert_int(0, result_int.value)
    assert_string("Error 1", result_int.error)

    result_int = lifted_add(Ok(1200), Err("Error 2"))

    assert_false(result_int.success)
    assert_int(0, result_int.value)
    assert_string("Error 2", result_int.error)

    result_int = lifted_add(Err("Error 1a"), Err("Error 2a"))

    assert_false(result_int.success)
    assert_int(0, result_int.value)
    assert_string("Error 1a", result_int.error)
}

sync fn call_lifted(expected: int, a: Result<int, string>, b: Result<int, string>) -> Result<Unit, string> = {
    assert_int(expected, lifted_add(a, b)?)
    Ok({})
}

test sync fn test_unwrap_unit_result() -> Unit = {
    let result_unit = call_lifted(1234, Ok(1200), Ok(34))

    assert_true(result_unit.success)

    result_unit = call_lifted(1200, Err("Error 1"), Ok(34))

    assert_false(result_unit.success)
    assert_string("Error 1", result_unit.error)

    result_unit = call_lifted(0, Ok(1200), Err("Error 2"))

    assert_false(result_unit.success)
    assert_string("Error 2", result_unit.error)

    result_unit = call_lifted(23, Err("Error 1a"), Err("Error 2"))

    assert_false(result_unit.success)
    assert_string("Error 1a", result_unit.error)
}

sync fn implicit_ok_result() -> Result<string, string> = "This is something"

sync fn implicit_ok_result_unit() -> Result<Unit, string> = {}

sync fn failure_sync() -> Result<Unit, string> = { Err("something went wrong") }

sync fn sync_chain_success() -> Result<string, string> = {
    implicit_ok_result_unit()?

    implicit_ok_result()? + " extra"
}

sync fn sync_chain_failure() -> Result<string, string> = {
    implicit_ok_result_unit()?

    failure_sync()?

    implicit_ok_result()? + " extra"
}

test sync fn test_result_implicit_ok() -> Unit = {
    let result = implicit_ok_result()

    assert_true(result.success)
    assert_string("This is something", result.value)

    result = sync_chain_success()

    assert_true(result.success)
    assert_string("This is something extra", result.value)

    let other : Result<int, string> = 1234

    assert_true(other.success)
    assert_int(1234, other.value)

    let unit_result = implicit_ok_result_unit()

    assert_true(unit_result.success)

    let fail_result = failure_sync()

    assert_false(fail_result.success)
    assert_string("something went wrong", fail_result.error)

    let chained_failure_result = sync_chain_failure()

    assert_false(chained_failure_result.success)
    assert_string("something went wrong", chained_failure_result.error)
}

fn implicit_ok_result_async() -> Result<string, string> = "This is something"

fn implicit_ok_result_unit_async() -> Result<Unit, string> = {}

fn failure_async() -> Result<Unit, string> = { Err("something went wrong") }

fn async_chain_success() -> Result<string, string> = {
    implicit_ok_result_unit_async()?

    implicit_ok_result_async()? + " extra"
}

fn async_chain_failure() -> Result<string, string> = {
    implicit_ok_result_unit_async()?

    failure_async()?

    implicit_ok_result_async()? + " extra"
}

test fn test_result_implicit_async() -> Unit = {
    let result = implicit_ok_result_async()

    assert_true(result.success)
    assert_string("This is something", result.value)

    result = async_chain_success()

    assert_true(result.success)
    assert_string("This is something extra", result.value)

    let unit_result = implicit_ok_result_unit_async()

    assert_true(unit_result.success)

    let fail_result = failure_async()

    assert_false(fail_result.success)
    assert_string("something went wrong", fail_result.error)

    let chained_failure_result = async_chain_failure()

    assert_false(chained_failure_result.success)
    assert_string("something went wrong", chained_failure_result.error)
}