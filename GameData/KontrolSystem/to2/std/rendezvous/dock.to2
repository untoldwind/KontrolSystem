use { Vessel, Targetable, DockingNode } from ksp::vessel
use { DEBUG } from ksp::debug
use { CONSOLE, RED, BLUE } from ksp::console
use { sleep, wait_until, current_time } from ksp::game
use { look_dir_up, vec3 } from ksp::math 
use { ship_is_facing } from std::utils
use { pid_loop } from ksp::control
use { clamp } from core::math

pub fn dock_vessel(vessel : Vessel, target : Targetable) -> Result<Unit, string> = {
    const (vessel_port, target_port) = choose_docking_ports(vessel, target)?
        
    DEBUG.add_vector(fn() -> vessel_port.position, fn() -> vessel_port.position + vessel_port.port_facing.vector * 10, RED, "", 1)
    DEBUG.add_vector(fn() -> vessel_port.position, fn() -> vessel_port.position + vessel_port.port_facing.up_vector * 10, BLUE, "", 1)

    DEBUG.add_vector(fn() -> target_port.position, fn() -> target_port.position + target_port.port_facing.vector * 10, RED, "", 1)
    DEBUG.add_vector(fn() -> target_port.position, fn() -> target_port.position + target_port.port_facing.up_vector * 10, BLUE, "", 1)

    vessel_port.control_from()

    vessel.actions.sas = false
    vessel.actions.rcs = false

    const steering_manager = vessel.manage_steering(fn() -> look_dir_up(-target_port.port_facing.vector, target_port.port_facing.up_vector))

    wait_until(fn() -> ship_is_facing(vessel, -target_port.port_facing.vector, 5, 0.5))

    CONSOLE.print_line("Aligned")

    dock_move_correct_side(vessel, target_port)?
    
    dock_approach(vessel, target_port)?
    
    steering_manager.release()
}

pub sync fn choose_docking_ports(vessel : Vessel, target : Targetable) -> Result<(vessel_port : DockingNode, target_port : DockingNode), string> = {
    const target_ports = if(Some(target_port) = target.docking_port) {
        [target_port]
    } else {
        const target_vessel = target.vessel.ok_or("Can only dock to another vessel")?
        target_vessel.docking_ports.filter(fn(part) -> part.state == "Ready")
    }
    const vessel_ports = vessel.docking_ports.filter(fn(part) -> part.state == "Ready")
 
    for(port in vessel_ports) {
        const maybe_target_port = target_ports.find(fn(target_port) -> target_port.node_type == port.node_type)
        
        if(maybe_target_port.defined) {
            return Ok((vessel_port: port, target_port: maybe_target_port.value))
        }
    }
    
    Err("No matching docking ports found")
}

pub fn dock_move_correct_side(vessel : Vessel, target_port : DockingNode) -> Result<Unit, string> = {
    CONSOLE.print_line("=== dock_move_correct_side ===")
    const console_row = CONSOLE.cursor_row
    CONSOLE.move_cursor(console_row + 8, 0)

    vessel.actions.rcs = true

    const dock_x = pid_loop(0.8, 0, 0.4, -1, 1)
    const dock_y = pid_loop(0.8, 0, 0.4, -1, 1)
    const dock_z = pid_loop(0.8, 0, 0.4, -1, 1)
    
    const rcs_manager = vessel.manage_rcs_translate(fn() -> {
        const now = current_time()
        const vel_diff = vessel.orbital_velocity - target_port.part.vessel.orbital_velocity
        const target_pos = target_port.position - vessel.position
        const x = target_pos * vessel.facing.right_vector
        const y = -target_pos * vessel.facing.up_vector
        const z = target_pos * vessel.facing.vector
        const vx = vel_diff * vessel.facing.right_vector
        const vy = -vel_diff * vessel.facing.up_vector
        const vz = vel_diff * vessel.facing.vector
        const tx = clamp(x / 20, -5, 5)
        const ty = clamp(y / 20, -5, 5)
        const tz = clamp((z - 100) / 20, -5, 5)

        CONSOLE.print_at(console_row    , 0, "X: " + x.to_string())
        CONSOLE.print_at(console_row + 1, 0, "Y: " + y.to_string())
        CONSOLE.print_at(console_row + 2, 0, "Z: " + z.to_string())
        CONSOLE.print_at(console_row + 3, 0, "VX: " + vx.to_string())
        CONSOLE.print_at(console_row + 4, 0, "VY: " + vy.to_string())
        CONSOLE.print_at(console_row + 5, 0, "VZ: " + vz.to_string())
        
        const dX = dock_x.update(now, tx - vx)
        const dY = dock_y.update(now, ty - vy)
        const dZ = dock_z.update(now, tz - vz)
        
        vec3(dX, dY, dZ)
    })
    
    wait_until(fn() -> {
        const target_pos = target_port.position - vessel.position
        const x = target_pos * vessel.facing.right_vector
        const y = -target_pos * vessel.facing.up_vector
        const z = target_pos * vessel.facing.vector
        
        vec3(x, y, z - 100).magnitude < 1
    })
    
    rcs_manager.release()
}

pub fn dock_approach(vessel : Vessel, target_port : DockingNode) -> Result<Unit, string> = {
    CONSOLE.print_line("=== dock_approach ===")
    const console_row = CONSOLE.cursor_row
    CONSOLE.move_cursor(console_row + 8, 0)

    vessel.actions.rcs = true

    const dock_x = pid_loop(0.4, 0, 1.2, -1, 1)
    const dock_y = pid_loop(0.4, 0, 1.2, -1, 1)
    const dock_z = pid_loop(0.8, 0, 0.4, -1, 1)
    
    const rcs_manager = vessel.manage_rcs_translate(fn() -> {
        const now = current_time()
        const vel_diff = vessel.orbital_velocity - target_port.part.vessel.orbital_velocity
        const target_pos = target_port.position - vessel.position
        const x = target_pos * vessel.facing.right_vector
        const y = -target_pos * vessel.facing.up_vector
        const z = target_pos * vessel.facing.vector
        const vx = vel_diff * vessel.facing.right_vector
        const vy = -vel_diff * vessel.facing.up_vector
        const vz = vel_diff * vessel.facing.vector
        const tz = if(z > 40) 2.0 else if(z > 20) 1.0 else 0.2

        CONSOLE.print_at(console_row    , 0, "X: " + x.to_string())
        CONSOLE.print_at(console_row + 1, 0, "Y: " + y.to_string())
        CONSOLE.print_at(console_row + 2, 0, "Z: " + z.to_string())
        CONSOLE.print_at(console_row + 3, 0, "VX: " + vx.to_string())
        CONSOLE.print_at(console_row + 4, 0, "VY: " + vy.to_string())
        CONSOLE.print_at(console_row + 5, 0, "VZ: " + vz.to_string())
        CONSOLE.print_at(console_row + 6, 0, "State: " + target_port.state)
        
        const dX = dock_x.update(now, x)
        const dY = dock_y.update(now, y)
        const dZ = dock_z.update(now, tz - vz)
        
        vec3(dX, dY, dZ)
    })
    
    wait_until(fn() -> target_port.state != "Ready")
    
    rcs_manager.release()
}
