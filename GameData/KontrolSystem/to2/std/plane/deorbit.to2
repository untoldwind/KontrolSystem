use { Vessel } from ksp::vessel
use { angle_to_360, remove_all_nodes } from std::utils
use { sqrt, PI, pow } from core::math
use { change_periapsis } from std::maneuvers
use { current_time } from ksp::game
use { exec_next_node } from std::vac

sync fn time_to_longitude(vessel : Vessel, longitude : float) -> float = {
    const s_day = vessel.main_body.rotation_period
    const k_ang_s = 360.0 / s_day         // Rotation angular speed
    const p = vessel.orbit.period
    const s_ang_s = (360.0 / p) - k_ang_s // Ship angular speed acounted for Body rotation.
    const tgt_longitude = angle_to_360(longitude)
    const ship_longitude = vessel.geo_coordinates.longitude
    const d_longitude = tgt_longitude - ship_longitude

    if(d_longitude < 0)
        (d_longitude + 360.0) / s_ang_s
    else
        d_longitude / s_ang_s
}

pub fn plane_deorbit(vessel : Vessel, landing_longitude : float) -> Result<Unit, string> = {
    const r1 = vessel.orbit.semi_major_axis
    const r2 = vessel.main_body.radius - 3000
    const pt = 0.5 * pow((r1 + r2) / (2 * r2), 1.5)
    const sp = sqrt( (4 * PI * PI * r2 * r2 * r2) / vessel.main_body.grav_parameter)
    const deorbit_travel_time = pt * sp / 2
    const phi = deorbit_travel_time / vessel.main_body.rotation_period * 360.0
    const deorbit_longitude = angle_to_360(landing_longitude - 145)
    const UT = current_time() + time_to_longitude(vessel, deorbit_longitude + phi)

    const delta_v = change_periapsis(vessel.orbit, UT, -3000)

    remove_all_nodes(vessel)
    vessel.maneuver.add_burn_vector(UT, delta_v)?

    exec_next_node(vessel)
}
