use { Vessel } from ksp::vessel
use { CONSOLE } from ksp::console
use { wait_until, sleep, current_time } from ksp::game
use { plane_takeoff } from std::plane::takeoff
use { has_flameout } from std::staging
use { circularize_orbit } from std::maneuvers
use { exec_next_node } from std::vac
use { max, min, clamp, acos_deg } from core::math
use { pid_loop, moving_average } from ksp::control
use { phys_warp } from std::warp

pub const TGTAirSpeed : float = 1450       // Target airspeed before switching to closed cycle
pub const AirBreathingAlt : float = 23000  // From this altitude and up, dual-mode engines will change to closed cycle.
pub const ClimbDefaultPitch : float = 20   // Default climb pitch
pub const GTAltitude : float = 45000       // End of "Gravity turn" (When ship will fly with pitch 0 until apoapsis)

pub fn plane_launch_ssto(vessel : Vessel, target_apoapsis : float, heading : float) -> Result<Unit, string> = {
    CONSOLE.print_line("=== plane_launch_ssto ===")

    phys_warp(1)
        
    plane_takeoff(vessel, 90, heading)
    
    plane_ssto_atmo_ascent(vessel, heading)
    
    plane_ssto_leave_atmo(vessel, target_apoapsis, heading)

    vessel.actions.bays = true
    
    sleep(1)
    
    vessel.actions.panels = true
    vessel.actions.radiators = true
    vessel.actions.antennas = true

    const (delta_v, UT) = circularize_orbit(vessel.orbit)

    vessel.maneuver.add_burn_vector(UT, delta_v)?

    exec_next_node(vessel)?

    vessel.actions.sas = true
    vessel.actions.rcs = false
}

sync fn target_acceleration(vessel : Vessel) -> float = {
    if(vessel.altitude > AirBreathingAlt || vessel.vertical_speed <= 0) {
        3.0
    } else {
        const time_to_mode_switch = (AirBreathingAlt - vessel.altitude) / vessel.vertical_speed
        
        max(3.0, (TGTAirSpeed - vessel.air_speed) / time_to_mode_switch + 1) 
    }
}

pub fn plane_ssto_atmo_ascent(vessel : Vessel, heading : float) -> Result<Unit, string> = {
    CONSOLE.print_line("=== plane_ssto_atmo_ascent ===")
    const console_row = CONSOLE.cursor_row
    CONSOLE.move_cursor(console_row + 4, 0)
    
    const climb_pitch_pid = pid_loop(1, 0.4, 0.6, -12, 12) //kP, kI, kD, Min, Max
    climb_pitch_pid.setpoint = 0

    const velocity_measure = moving_average(15)
    const steering_manager = vessel.manage_steering(fn() -> {
        const time = current_time()
        velocity_measure.update(time, vessel.air_speed)
        const current_accel = velocity_measure.mean_diff
        const target_accel = target_acceleration(vessel)
        const accel_pitch = ClimbDefaultPitch + climb_pitch_pid.update(time, target_accel - current_accel)

        CONSOLE.print_at(console_row    , 0, "Accel pitch: " + accel_pitch.to_string())
        CONSOLE.print_at(console_row + 1, 0, "Current accel: " + current_accel.to_string())
        CONSOLE.print_at(console_row + 2, 0, "Target  accel: " + target_accel.to_string())
        
        vessel.heading_direction(heading, accel_pitch, 0)
    })
    const throttle_manager = vessel.set_throttle(1.0)

    wait_until(fn() -> vessel.altitude > AirBreathingAlt)

    steering_manager.release()
    throttle_manager.release()
}

pub fn plane_ssto_leave_atmo(vessel : Vessel, target_apoapsis : float, heading : float) -> Result<Unit, string> = {
    CONSOLE.print_line("=== plane_ssto_leave_atmo ===")
    const console_row = CONSOLE.cursor_row
    CONSOLE.move_cursor(console_row + 2, 0)
    
    const steering_manager = vessel.manage_steering(fn() -> {
        const gt_pct = clamp(vessel.altitude / GTAltitude, 0, 1)
        const gt_pitch = acos_deg(gt_pct)
        
        CONSOLE.print_at(console_row, 0, "GT pitch: " + gt_pitch.to_string())
        
        vessel.heading_direction(heading, min(gt_pitch, 18), 0)
    })
    const throttle_manager = vessel.manage_throttle(fn() -> {
        const throttle = if(vessel.orbit.apoapsis > target_apoapsis) {
            0.0
        } else {
            const apo_percent = vessel.orbit.apoapsis / target_apoapsis
            const apo_compensation = if(apo_percent > 0.9) (apo_percent - 0.9) * 9.0 else 0.0
            1.0 - clamp(apo_compensation, 0, 0.95)
        }
        CONSOLE.print_at(console_row + 1, 0, "Throttle: " + throttle.to_string())
        throttle
    })

    CONSOLE.print_line("Closing air intakes")
    vessel.actions.intakes = false
    
    wait_until(fn() -> vessel.altitude > vessel.main_body.atmosphere_depth || has_flameout(vessel))
    
    if(vessel.altitude < vessel.main_body.atmosphere_depth) {
        CONSOLE.print_line("Trigger next stage")
        vessel.stage.next()

        wait_until(fn() -> vessel.altitude > vessel.main_body.atmosphere_depth)
    } 

    throttle_manager.release()
    steering_manager.release()
}
