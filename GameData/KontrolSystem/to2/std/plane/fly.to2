use { Vessel } from ksp::vessel
use { GeoCoordinates } from ksp::orbit
use { CONSOLE } from ksp::console
use { pid_loop } from ksp::control
use { current_time, wait_until } from ksp::game
use { Vec3 } from ksp::math
use { clamp } from core::math
use { angle_to_360, vessel_heading_of } from std::utils

pub fn plane_fly_to(vessel : Vessel, target : Vec3, target_speed : float, roll_limit: float) -> Unit = {
    CONSOLE.print_line("=== plane_fly_to ===")
    const console_row = CONSOLE.cursor_row
    CONSOLE.move_cursor(console_row + 8, 0)

    const throttle_pid = pid_loop(0.05, 0.001, 0.05, 0,1) //kP, kI, kD, Min, Max
    const pitch_pid = pid_loop(0.8, 0.05, 0.6, -5, 20) //kP, kI, kD, Min, Max

    const calc_target_vertical_speed = fn() -> {
        const distance = vessel.up.exclude_from(target + vessel.main_body.position).magnitude
        const dT = distance / vessel.surface_velocity.magnitude
        const target_alt = vessel.main_body.altitude_of(target + vessel.main_body.position)
        
        (target_alt - vessel.altitude) / dT
    }
    
    const throttle_manager = vessel.manage_throttle(fn() -> throttle_pid.update(current_time(), vessel.air_speed - target_speed))
    
    const steering_manager = vessel.manage_steering(fn() -> {
        const speed_heading = vessel_heading_of(vessel, vessel.surface_velocity)
        const target_heading = vessel_heading_of(vessel, target + vessel.main_body.position)
        const heading_diff = angle_to_360(target_heading - speed_heading + 180.0) - 180.0
        const steering_heading = speed_heading + clamp(heading_diff, -10.0, 10.0)
        const roll = clamp(-heading_diff, -roll_limit, roll_limit)
        const target_vertical_speed = calc_target_vertical_speed()
        const pitch = pitch_pid.update(current_time(), vessel.vertical_speed - target_vertical_speed)

        CONSOLE.print_at(console_row    , 0, "TgtVSpeed:     " + target_vertical_speed.to_fixed(2))
        CONSOLE.print_at(console_row + 1, 0, "VSpeed:        " + vessel.vertical_speed.to_fixed(2))
        CONSOLE.print_at(console_row + 2, 0, "SpeedHeading:  " + speed_heading.to_fixed(2))
        CONSOLE.print_at(console_row + 3, 0, "TargetHeading: " + target_heading.to_fixed(2))
        CONSOLE.print_at(console_row + 4, 0, "Steering:      " + steering_heading.to_fixed(2))
        CONSOLE.print_at(console_row + 5, 0, "Pitch:         " + pitch.to_fixed(2))
        CONSOLE.print_at(console_row + 6, 0, "Roll:          " + roll.to_fixed(2))
        
        vessel.heading_direction(steering_heading, pitch, roll)
    })

    wait_until(fn() -> vessel.up.exclude_from(target + vessel.main_body.position).magnitude < 1000)
    
    steering_manager.release()
    throttle_manager.release()
}