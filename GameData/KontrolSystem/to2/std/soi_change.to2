use { Orbit } from ksp::orbit
use { vec3, Vec3, angle_axis } from ksp::math
use { change_periapsis, change_apoapsis } from std::maneuvers
use core::math as math

pub sync fn moon_return_ejection(start : Orbit, min_UT : float, target_periapsis : float) -> Result<(delta_v: Vec3, UT: float), string> = {
    const moon = start.reference_body
    const primary = moon.orbit.reference_body
    const primary_orbit = primary.create_orbit_from_parameters(moon.orbit.inclination, moon.orbit.eccentricity, primary.radius + target_periapsis, moon.orbit.LAN, moon.orbit.argument_of_periapsis, moon.orbit.mean_anomaly_at_epoch, moon.orbit.epoch)

    interplanetary_transfer_ejection(start, min_UT, primary_orbit, false)    
}

pub sync fn interplanetary_transfer_ejection(start : Orbit, min_UT : float, target : Orbit, sync_phase_angle : bool) -> Result<(delta_v: Vec3, UT: float), string> = {
    const planet_orbit = start.reference_body.orbit
    
    let ideal_burn_UT = min_UT
    let ideal_delta_v = if(target.semi_major_axis < planet_orbit.semi_major_axis) 
        change_periapsis(planet_orbit, ideal_burn_UT, target.semi_major_axis)?
    else
        change_apoapsis(planet_orbit, ideal_burn_UT, target.semi_major_axis)?    

    const soi_exit_velocity = ideal_delta_v
    const in_plane_soi_exit_direction = start.orbit_normal.exclude_from(soi_exit_velocity).normalized
    const soi_exit_energy = 0.5 * soi_exit_velocity.sqr_magnitude - start.reference_body.grav_parameter / start.reference_body.SOI_radius
    const ejection_radius = start.semi_major_axis
    const ejection_kinetic_energy = soi_exit_energy + start.reference_body.grav_parameter / ejection_radius
    const ejection_speed = math::sqrt(2 * ejection_kinetic_energy)

    const ejection_orbit_initial_velocity = ejection_speed * start.reference_body.right
    const sample_ejection_orbit = start.reference_body.create_orbit(ejection_radius * start.reference_body.up, ejection_orbit_initial_velocity, 0)
    const ejection_orbit_duration = sample_ejection_orbit.next_time_of_radius(0, start.reference_body.SOI_radius)
    const ejection_orbit_final_velocity = sample_ejection_orbit.orbital_velocity(ejection_orbit_duration)
    
    const turning_angle = -1.0 * ejection_orbit_initial_velocity.angle_to(ejection_orbit_final_velocity).abs

    const ejection_point_direction = angle_axis(turning_angle - 90, start.orbit_normal) * in_plane_soi_exit_direction
    const ejection_true_anomaly = start.true_anomaly_from_vector(ejection_point_direction)
    let burn_UT = start.time_of_true_anomaly(ejection_true_anomaly, ideal_burn_UT - start.period)

    if(ideal_burn_UT - burn_UT > start.period / 2 || burn_UT < min_UT)
        burn_UT += start.period
    
    const ejection_burn_direction = angle_axis(turning_angle, start.orbit_normal) * in_plane_soi_exit_direction
    const ejection_velocity = ejection_speed * ejection_burn_direction
    const pre_ejection_velocity = start.orbital_velocity(burn_UT)
    
    (delta_v: ejection_velocity - pre_ejection_velocity, UT: burn_UT) 
}
