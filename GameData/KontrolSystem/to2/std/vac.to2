use { Vessel, SITUATION_VACUUM } from ksp::vessel
use { look_dir_up } from ksp::math
use { ship_is_facing } from std::utils
use { reset_warp, phys_warp, warp_seconds } from std::warp
use { trigger_staging } from std::staging
use { current_time, sleep, wait_until } from ksp::game
use { hud_text, YELLOW, RED, CONSOLE } from ksp::console
use core::math as math

/// Execute the next planed maneuver node.
///
/// Will result in an error if there are no planed maneuver nodes.
pub fn exec_next_node(vessel : Vessel) -> Result<Unit, string> = {
    CONSOLE.print_line("=== exec_next_node ===")
    const console_row = CONSOLE.cursor_row
    CONSOLE.move_cursor(console_row + 3, 0)

    phys_warp(1)

    const node = vessel.maneuver.next_node()?

    vessel.actions.sas = false
    vessel.actions.rcs = false

    const start = current_time()
    const dv0 = node.burn_vector
    const (burn_time, half_burn_time) = estimate_burn_time(vessel, dv0.magnitude, 1.0, 1.0)
    const steering_manager = vessel.manage_steering(fn() -> look_dir_up(node.burn_vector, vessel.orbit.relative_position(node.time)))
    const dv_min : Cell<float> = Cell(dv0.magnitude)
    const throttle_limit : Cell<(min: float, max: float)> = Cell((min: 0.0, max: 0.0))
    const throttle_manager = vessel.manage_throttle(fn() -> {
        const (min, max) = throttle_limit.value
        const dv = math::min(dv_min.value, node.burn_vector.magnitude)
        const throttle = math::clamp(dv * vessel.mass / math::max(1.0, vessel.available_thrust), min, max)
        CONSOLE.print_at(console_row + 1, 0, "Throttle: " + throttle.to_string())
        throttle
    })

    // Align ship before warping
    let warped = false
    while(!ship_is_facing(vessel, steering_manager.direction.vector, 5, 0.5) || 
          (node.ETA <= half_burn_time && ship_is_facing(vessel, steering_manager.direction.vector, 20, 5))) {
        sleep(0.1)
        if(start > current_time() + 2 && vessel.angular_velocity.magnitude < 0.01) {
            CONSOLE.print_at(console_row + 2, 0, "Turn rate to slow, activate RCS")
            vessel.actions.rcs = true
        }
        if(!warped) {
            warped = true
            phys_warp(1)
        }
    }
    if(warped) reset_warp()

    CONSOLE.print_line("Warping to maneuver node")
    warp_seconds(node.ETA - half_burn_time - 20)    

    steering_manager.set_direction_provider(fn() -> look_dir_up(node.burn_vector, vessel.position - vessel.main_body.position))

    CONSOLE.print_line("Node ETA: " + node.ETA.to_string())
    CONSOLE.print_line("Half burn time: " + half_burn_time.to_string())
    
    if(node.ETA - half_burn_time > 5) {
        phys_warp(1)
        wait_until(fn() -> node.ETA - half_burn_time <= 2)
        reset_warp()
    }
    wait_until(fn() -> node.ETA - half_burn_time <= 1)

    let almost_there = 0.0
    let choked = 0.0
    let warned = false

    while(dv_min.value >= 0.05) {
        const dv = node.burn_vector.magnitude

        dv_min.update(fn(m) -> math::min(m, dv))
        CONSOLE.print_at(console_row    , 0, "DV remaining: " + dv_min.value.to_string())

        sleep(0.1)
        if(trigger_staging(vessel)) hud_text("Stage separation during navigation burn", 10, 36, 4, YELLOW)

        if(vessel.available_thrust > 0) {
            if(ship_is_facing(vessel, steering_manager.direction.vector, 20, 2)) {
                CONSOLE.print_at(console_row + 2, 0, "Ship aligned, unlock thrust")
                throttle_limit.set_value((min: 0.05, max: 1.0))
            } else {
                CONSOLE.print_at(console_row + 2, 0, "Ship unaligned, activate RCS with limited throttle")
                throttle_limit.set_value((min: 0.1, max: 0.1))
                vessel.actions.rcs = true
            }
            if(dv0 * node.burn_vector < 0) break
            if(dv <= 0.2) {
                if(almost_there == 0.0) almost_there = current_time()
                if(current_time() - almost_there > 5) break
                if(dv <= 0.05) break
            }
            choked = 0.0
        } else {
            CONSOLE.print_at(console_row + 2, 0, "No available thrust ... check staging")
            if(choked == 0.0) choked = current_time()
            if(!warned && current_time() - choked > 3) {
                warned = true
                hud_text("No acceleration", 10, 36, 4, YELLOW)
            }
            if(current_time() - choked > 30) {
                hud_text("No acceleration", 10, 36, 4, RED)
                return Err("No acceleration")
            }
        }
    }

    throttle_manager.release()
    steering_manager.release()

    node.remove()

    vessel.actions.sas = true
    vessel.actions.rcs = false
}

/// Estimate the required burn time for a desired `delta_v` in vacuum.
///
/// * `stage_delay` is the assumed amount of seconds required for staging
/// * `throttle_limit` is a limit for the throttle to be considered
pub sync fn estimate_burn_time(vessel : Vessel, delta_v : float, stage_delay : float, throttle_limit : float) -> (burn_time: float, half_burn_time: float) = {
    let stage = vessel.stage.number + 1
    let dv_left = delta_v
    let half_dv_left = delta_v / 2
    let burn_time = 0.0
    let half_burn_time = 0.0
    let last_stage_burn_time = 0.0

    while(stage >= 1) {
        stage -= 1

        const maybe_stage_info = vessel.stage_deltav(stage)

        if(!maybe_stage_info.defined) continue

        const stage_info = maybe_stage_info.value
        const stage_deltav = stage_info.get_deltav(SITUATION_VACUUM)
        const stage_thrust = stage_info.get_thrust(SITUATION_VACUUM)

        if(stage_deltav <= 0.0 || stage_thrust <= 0.0) {
            // This stage has to be skipped, i.e. it will be necessary to stage twice
            if (burn_time - last_stage_burn_time < stage_delay && stage != vessel.stage.number)
                burn_time += stage_delay - (burn_time - last_stage_burn_time)
            burn_time += stage_delay
            last_stage_burn_time = burn_time
            continue
        }
        const stage_burn_dv = math::min(stage_deltav, dv_left)
        dv_left -= stage_burn_dv
        const stage_burn_fraction = stage_burn_dv / stage_deltav

        // Delta-V is proportional to ln(m0 / m1) (where m0 is initial
        // mass and m1 is final mass). We need to know the final mass
        // after this stage burns (m1b):
        //      ln(m0 / m1) * stageBurnFraction = ln(m0 / m1b)
        //      exp(ln(m0 / m1) * stageBurnFraction) = m0 / m1b
        //      m1b = m0 / (exp(ln(m0 / m1) * stageBurnFraction))
        const stage_burn_final_mass = stage_info.start_mass / math::exp(math::log(stage_info.start_mass / stage_info.end_mass) * stage_burn_fraction)
        const stage_avg_accel = stage_thrust / ((stage_info.start_mass + stage_burn_final_mass) / 2) * throttle_limit

        half_burn_time += math::min(half_dv_left, stage_burn_dv) / stage_avg_accel
        half_dv_left = math::max(0, half_dv_left - stage_burn_dv)

        burn_time += stage_burn_dv / stage_avg_accel
    }

    (burn_time: burn_time, half_burn_time: half_burn_time)
}

pub fn vac_launch_ascent(vessel: Vessel, target_apoapsis: float, heading: float) -> Unit = {
    CONSOLE.print_line("=== vac_launch_ascent ===")
    const console_row = CONSOLE.cursor_row
    CONSOLE.move_cursor(console_row + 2, 0)
    
    vessel.actions.sas = false
    vessel.actions.rcs = false
    vessel.actions.light = true
    
 	// Starting/ending height of gravity turn
    const launch_gt0 = vessel.altitude
    const launch_gt1 = vessel.altitude + 3000

    const steering_manager = vessel.manage_steering(fn() -> {
        const gtPct = math::clamp((vessel.altitude - launch_gt0) / (launch_gt1 - launch_gt0), 0, 1)
        const pitch = math::acos_deg(gtPct)

        CONSOLE.print_at(console_row, 0, "Target pitch: " + pitch.to_string())

        vessel.heading_direction(heading, pitch, -90)
    })
    
    const throttle_manager = vessel.manage_throttle(fn() -> {
        const apoPercent = vessel.orbit.apoapsis / target_apoapsis
        const apoCompensation = if(apoPercent > 0.9) (apoPercent - 0.9) * 10 else 0.0
        const throttle = 1.0 - math::clamp(apoCompensation, 0, 0.5)
        
        CONSOLE.print_at(console_row + 1, 0, "Target throttle: " + throttle.to_string() )

        throttle
    })

    while(vessel.orbit.apoapsis < target_apoapsis) {
        trigger_staging(vessel)
        sleep(0.05)
    }

    throttle_manager.release()
    steering_manager.release()
} 