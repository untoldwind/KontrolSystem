use * from core::testing
use core::math as math
use { amoeba_optimize_perturbation } from std::numerics::amoeba_optimize
use { vec2 } from ksp::math

sync fn test_func(x : float, y : float) -> float = 20 *(math::sin(x) + math::sin(y)) + ((x - 3) * (x - 3) + (y - 3) * (y - 3))

test sync fn test_amoeba() -> Result<Unit, string> = {
    const (x, y) = amoeba_optimize_perturbation(test_func, vec2(3, 4), vec2(0.5, 0.5), 1e-10, 1000)?

    assert_float(4.5561444, x, 1e-5)
    assert_float(4.5561444, y, 1e-5)

    Ok({})
}

sync fn himmelblau(x : float, y : float) -> float = {
    const a = x*x + y - 11
    const b = x + y*y - 7
    a*a + b*b
}

test sync fn test_amoeba2() -> Result<Unit, string> = {
    let (x, y) = amoeba_optimize_perturbation(himmelblau, vec2(6, 6), vec2(0.5, 0.5), 1e-5, 1000)?

    assert_float(3, x, 1e-5)
    assert_float(2, y, 1e-5)

    (x, y) = amoeba_optimize_perturbation(himmelblau, vec2(6, -6), vec2(0.5, 0.5), 1e-5, 1000)?

    assert_float(3.584428, x, 1e-5)
    assert_float(-1.848126, y, 1e-5)

    (x, y) = amoeba_optimize_perturbation(himmelblau, vec2(-6, 6), vec2(0.5, 0.5), 1e-5, 1000)?

    assert_float(-2.805118, x, 1e-5)
    assert_float(3.131312, y, 1e-5)

    (x, y) = amoeba_optimize_perturbation(himmelblau, vec2(-6, -6), vec2(0.5, 0.5), 1e-5, 1000)?

    assert_float(-3.779310, x, 1e-5)
    assert_float(-3.283186, y, 1e-5)

    Ok({})
}