/// Collection of helper functions not fitting anywhere else

use { Vessel } from ksp::vessel
use { Orbit, Body } from ksp::orbit
use { Vec3 } from ksp::math
use { cos_deg, atan2_deg } from core::math

/// Determine if `vessel` is facing a given direction.
///
/// * `max_deviation_degrees` sets a limit how many degrees the angle may differ
/// * `max_angular_velocity` sets a limit how much the `vessel` may still be turning
pub sync fn ship_is_facing(vessel : Vessel, desired_facing : Vec3, max_deviation_degrees : float, max_angular_velocity : float) -> bool = 
    desired_facing.normalized * vessel.facing.vector.normalized >= cos_deg(max_deviation_degrees) && vessel.angular_velocity.magnitude < max_angular_velocity

/// Removes all maneuvering nodes from the flight plan of a `vessel`.
pub sync fn remove_all_nodes(vessel : Vessel) -> Unit = {
    for(node in vessel.maneuver.nodes) {
        node.remove()
    }
}

pub sync fn angle_to_360(angle : float) -> float = {
    const mod_angle = angle % 360
    if(mod_angle < 0) mod_angle + 360 else mod_angle
}

pub sync fn angle_to_180(angle : float) -> float = {
   let mod_angle = angle_to_360(angle)
   if (mod_angle > 180) mod_angle - 360 else mod_angle
}

pub sync fn vessel_heading_of(vessel : Vessel, face : Vec3) -> float = {
    const norm_face = face.normalized
    const x = vessel.north * norm_face
    const y = vessel.up.cross(vessel.north) * norm_face
    
    atan2_deg(y, x)
}

pub sync fn vessel_pitch(vessel : Vessel) -> float = {
    const facing = vessel.facing
    const fore = facing.vector
    const up = facing.up_vector
    const body_up = -vessel.main_body.position.normalized
    
    atan2_deg(body_up * fore, body_up * up)
}

pub sync fn vessel_radar_altimeter(vessel : Vessel) -> float = {
    vessel.altitude - vessel.geo_coordinates.terrain_height
}

/// Create a representation of a target orbit as it usually specified in a contract
/// * `body` the target body
/// * `apoapsis` the desired apoapsis (above sea-level)
/// * `periapsis` the desired periapsis (above sea-level)
/// * `inclination` the desired inclination in degree
/// * `lan` the longitude of ascending node in degree (if contract does not specify this it is 0)
/// * `aop` the argument of periapsis in degree (if contract does not specify this it is 0)
pub sync fn create_target_orbit(body: Body, apoapsis: float, periapsis: float, inclination: float, lan: float, aop: float) -> Orbit = {
    const sma = (apoapsis + periapsis + 2 * body.radius) / 2
    const eccentricity = (apoapsis - periapsis) / sma / 2
    
    body.create_orbit_from_parameters(inclination, eccentricity, sma, lan, aop, 0, 0)
}

pub sync fn load_mission_state(vessel: Vessel, initial: string) -> string = {
    for(volume in vessel.volumes) {
        if(volume.has_string("mission_state")) {
            return volume.get_string("mission_state", initial)
        }
    }
    
    initial
}

pub sync fn store_mission_state(vessel: Vessel, state: string) -> Unit = {
    for(volume in vessel.volumes) {
        volume.set_string("mission_state", state)
    }
}
